using UnityEngine;
using TMPro;
using System.Runtime.CompilerServices;

// Shapes © Freya Holmér - https://twitter.com/FreyaHolmer/
// Website & Documentation - https://acegikmo.com/shapes/
// this file is auto-generated by CodegenDrawOverloads
namespace Shapes {
	public static partial class Draw {
		/// <summary>Draws a line from start to end</summary><param name="start">The starting point of this line</param><param name="end">The endpoint of this line</param>
		[MethodImpl( INLINE )] public static void Line( Vector3 start, Vector3 end ) => Line_Internal( LineEndCaps, ThicknessSpace, start, end, Color, Color, Thickness );
		/// <summary>Draws a line from start to end</summary><param name="start">The starting point of this line</param><param name="end">The endpoint of this line</param><param name="color">The color of the line</param>
		[MethodImpl( INLINE )] public static void Line( Vector3 start, Vector3 end, Color color ) => Line_Internal( LineEndCaps, ThicknessSpace, start, end, color, color, Thickness );
		/// <summary>Draws a line from start to end</summary><param name="start">The starting point of this line</param><param name="end">The endpoint of this line</param><param name="colorStart">The color at the starting point</param><param name="colorEnd">The color at the endpoint</param>
		[MethodImpl( INLINE )] public static void Line( Vector3 start, Vector3 end, Color colorStart, Color colorEnd ) => Line_Internal( LineEndCaps, ThicknessSpace, start, end, colorStart, colorEnd, Thickness );
		/// <summary>Draws a line from start to end</summary><param name="start">The starting point of this line</param><param name="end">The endpoint of this line</param><param name="thickness">The thickness of the line</param>
		[MethodImpl( INLINE )] public static void Line( Vector3 start, Vector3 end, float thickness ) => Line_Internal( LineEndCaps, ThicknessSpace, start, end, Color, Color, thickness );
		/// <summary>Draws a line from start to end</summary><param name="start">The starting point of this line</param><param name="end">The endpoint of this line</param><param name="thickness">The thickness of the line</param><param name="color">The color of the line</param>
		[MethodImpl( INLINE )] public static void Line( Vector3 start, Vector3 end, float thickness, Color color ) => Line_Internal( LineEndCaps, ThicknessSpace, start, end, color, color, thickness );
		/// <summary>Draws a line from start to end</summary><param name="start">The starting point of this line</param><param name="end">The endpoint of this line</param><param name="thickness">The thickness of the line</param><param name="colorStart">The color at the starting point</param><param name="colorEnd">The color at the endpoint</param>
		[MethodImpl( INLINE )] public static void Line( Vector3 start, Vector3 end, float thickness, Color colorStart, Color colorEnd ) => Line_Internal( LineEndCaps, ThicknessSpace, start, end, colorStart, colorEnd, thickness );
		/// <summary>Draws a line from start to end</summary><param name="start">The starting point of this line</param><param name="end">The endpoint of this line</param><param name="endCaps">The type of end caps to use</param>
		[MethodImpl( INLINE )] public static void Line( Vector3 start, Vector3 end, LineEndCap endCaps ) => Line_Internal( endCaps, ThicknessSpace, start, end, Color, Color, Thickness );
		/// <summary>Draws a line from start to end</summary><param name="start">The starting point of this line</param><param name="end">The endpoint of this line</param><param name="endCaps">The type of end caps to use</param><param name="color">The color of the line</param>
		[MethodImpl( INLINE )] public static void Line( Vector3 start, Vector3 end, LineEndCap endCaps, Color color ) => Line_Internal( endCaps, ThicknessSpace, start, end, color, color, Thickness );
		/// <summary>Draws a line from start to end</summary><param name="start">The starting point of this line</param><param name="end">The endpoint of this line</param><param name="endCaps">The type of end caps to use</param><param name="colorStart">The color at the starting point</param><param name="colorEnd">The color at the endpoint</param>
		[MethodImpl( INLINE )] public static void Line( Vector3 start, Vector3 end, LineEndCap endCaps, Color colorStart, Color colorEnd ) => Line_Internal( endCaps, ThicknessSpace, start, end, colorStart, colorEnd, Thickness );
		/// <summary>Draws a line from start to end</summary><param name="start">The starting point of this line</param><param name="end">The endpoint of this line</param><param name="thickness">The thickness of the line</param><param name="endCaps">The type of end caps to use</param>
		[MethodImpl( INLINE )] public static void Line( Vector3 start, Vector3 end, float thickness, LineEndCap endCaps ) => Line_Internal( endCaps, ThicknessSpace, start, end, Color, Color, thickness );
		/// <summary>Draws a line from start to end</summary><param name="start">The starting point of this line</param><param name="end">The endpoint of this line</param><param name="thickness">The thickness of the line</param><param name="endCaps">The type of end caps to use</param><param name="color">The color of the line</param>
		[MethodImpl( INLINE )] public static void Line( Vector3 start, Vector3 end, float thickness, LineEndCap endCaps, Color color ) => Line_Internal( endCaps, ThicknessSpace, start, end, color, color, thickness );
		/// <summary>Draws a line from start to end</summary><param name="start">The starting point of this line</param><param name="end">The endpoint of this line</param><param name="thickness">The thickness of the line</param><param name="endCaps">The type of end caps to use</param><param name="colorStart">The color at the starting point</param><param name="colorEnd">The color at the endpoint</param>
		[MethodImpl( INLINE )] public static void Line( Vector3 start, Vector3 end, float thickness, LineEndCap endCaps, Color colorStart, Color colorEnd ) => Line_Internal( endCaps, ThicknessSpace, start, end, colorStart, colorEnd, thickness );
		/// <summary>Draws a polyline, given an existing polyline path</summary><param name="path">The path to use when drawing. Note: be sure to call myPolylinePath.Dispose() when you are done with it, or use it inside of using-statements</param>
		[MethodImpl( INLINE )] public static void Polyline( PolylinePath path ) => Polyline_Internal( path, false, PolylineGeometry, PolylineJoins, Thickness, ThicknessSpace, Color );
		/// <summary>Draws a polyline, given an existing polyline path</summary><param name="path">The path to use when drawing. Note: be sure to call myPolylinePath.Dispose() when you are done with it, or use it inside of using-statements</param><param name="closed">Whether or not this polyline should be a closed loop</param>
		[MethodImpl( INLINE )] public static void Polyline( PolylinePath path, bool closed ) => Polyline_Internal( path, closed, PolylineGeometry, PolylineJoins, Thickness, ThicknessSpace, Color );
		/// <summary>Draws a polyline, given an existing polyline path</summary><param name="path">The path to use when drawing. Note: be sure to call myPolylinePath.Dispose() when you are done with it, or use it inside of using-statements</param><param name="thickness">The thickness of the polyline</param>
		[MethodImpl( INLINE )] public static void Polyline( PolylinePath path, float thickness ) => Polyline_Internal( path, false, PolylineGeometry, PolylineJoins, thickness, ThicknessSpace, Color );
		/// <summary>Draws a polyline, given an existing polyline path</summary><param name="path">The path to use when drawing. Note: be sure to call myPolylinePath.Dispose() when you are done with it, or use it inside of using-statements</param><param name="closed">Whether or not this polyline should be a closed loop</param><param name="thickness">The thickness of the polyline</param>
		[MethodImpl( INLINE )] public static void Polyline( PolylinePath path, bool closed, float thickness ) => Polyline_Internal( path, closed, PolylineGeometry, PolylineJoins, thickness, ThicknessSpace, Color );
		/// <summary>Draws a polyline, given an existing polyline path</summary><param name="path">The path to use when drawing. Note: be sure to call myPolylinePath.Dispose() when you are done with it, or use it inside of using-statements</param><param name="joins">What type of joins to use</param>
		[MethodImpl( INLINE )] public static void Polyline( PolylinePath path, PolylineJoins joins ) => Polyline_Internal( path, false, PolylineGeometry, joins, Thickness, ThicknessSpace, Color );
		/// <summary>Draws a polyline, given an existing polyline path</summary><param name="path">The path to use when drawing. Note: be sure to call myPolylinePath.Dispose() when you are done with it, or use it inside of using-statements</param><param name="closed">Whether or not this polyline should be a closed loop</param><param name="joins">What type of joins to use</param>
		[MethodImpl( INLINE )] public static void Polyline( PolylinePath path, bool closed, PolylineJoins joins ) => Polyline_Internal( path, closed, PolylineGeometry, joins, Thickness, ThicknessSpace, Color );
		/// <summary>Draws a polyline, given an existing polyline path</summary><param name="path">The path to use when drawing. Note: be sure to call myPolylinePath.Dispose() when you are done with it, or use it inside of using-statements</param><param name="thickness">The thickness of the polyline</param><param name="joins">What type of joins to use</param>
		[MethodImpl( INLINE )] public static void Polyline( PolylinePath path, float thickness, PolylineJoins joins ) => Polyline_Internal( path, false, PolylineGeometry, joins, thickness, ThicknessSpace, Color );
		/// <summary>Draws a polyline, given an existing polyline path</summary><param name="path">The path to use when drawing. Note: be sure to call myPolylinePath.Dispose() when you are done with it, or use it inside of using-statements</param><param name="closed">Whether or not this polyline should be a closed loop</param><param name="thickness">The thickness of the polyline</param><param name="joins">What type of joins to use</param>
		[MethodImpl( INLINE )] public static void Polyline( PolylinePath path, bool closed, float thickness, PolylineJoins joins ) => Polyline_Internal( path, closed, PolylineGeometry, joins, thickness, ThicknessSpace, Color );
		/// <summary>Draws a polyline, given an existing polyline path</summary><param name="path">The path to use when drawing. Note: be sure to call myPolylinePath.Dispose() when you are done with it, or use it inside of using-statements</param><param name="color">The color of the polyline</param>
		[MethodImpl( INLINE )] public static void Polyline( PolylinePath path, Color color ) => Polyline_Internal( path, false, PolylineGeometry, PolylineJoins, Thickness, ThicknessSpace, color );
		/// <summary>Draws a polyline, given an existing polyline path</summary><param name="path">The path to use when drawing. Note: be sure to call myPolylinePath.Dispose() when you are done with it, or use it inside of using-statements</param><param name="closed">Whether or not this polyline should be a closed loop</param><param name="color">The color of the polyline</param>
		[MethodImpl( INLINE )] public static void Polyline( PolylinePath path, bool closed, Color color ) => Polyline_Internal( path, closed, PolylineGeometry, PolylineJoins, Thickness, ThicknessSpace, color );
		/// <summary>Draws a polyline, given an existing polyline path</summary><param name="path">The path to use when drawing. Note: be sure to call myPolylinePath.Dispose() when you are done with it, or use it inside of using-statements</param><param name="thickness">The thickness of the polyline</param><param name="color">The color of the polyline</param>
		[MethodImpl( INLINE )] public static void Polyline( PolylinePath path, float thickness, Color color ) => Polyline_Internal( path, false, PolylineGeometry, PolylineJoins, thickness, ThicknessSpace, color );
		/// <summary>Draws a polyline, given an existing polyline path</summary><param name="path">The path to use when drawing. Note: be sure to call myPolylinePath.Dispose() when you are done with it, or use it inside of using-statements</param><param name="closed">Whether or not this polyline should be a closed loop</param><param name="thickness">The thickness of the polyline</param><param name="color">The color of the polyline</param>
		[MethodImpl( INLINE )] public static void Polyline( PolylinePath path, bool closed, float thickness, Color color ) => Polyline_Internal( path, closed, PolylineGeometry, PolylineJoins, thickness, ThicknessSpace, color );
		/// <summary>Draws a polyline, given an existing polyline path</summary><param name="path">The path to use when drawing. Note: be sure to call myPolylinePath.Dispose() when you are done with it, or use it inside of using-statements</param><param name="joins">What type of joins to use</param><param name="color">The color of the polyline</param>
		[MethodImpl( INLINE )] public static void Polyline( PolylinePath path, PolylineJoins joins, Color color ) => Polyline_Internal( path, false, PolylineGeometry, joins, Thickness, ThicknessSpace, color );
		/// <summary>Draws a polyline, given an existing polyline path</summary><param name="path">The path to use when drawing. Note: be sure to call myPolylinePath.Dispose() when you are done with it, or use it inside of using-statements</param><param name="closed">Whether or not this polyline should be a closed loop</param><param name="joins">What type of joins to use</param><param name="color">The color of the polyline</param>
		[MethodImpl( INLINE )] public static void Polyline( PolylinePath path, bool closed, PolylineJoins joins, Color color ) => Polyline_Internal( path, closed, PolylineGeometry, joins, Thickness, ThicknessSpace, color );
		/// <summary>Draws a polyline, given an existing polyline path</summary><param name="path">The path to use when drawing. Note: be sure to call myPolylinePath.Dispose() when you are done with it, or use it inside of using-statements</param><param name="thickness">The thickness of the polyline</param><param name="joins">What type of joins to use</param><param name="color">The color of the polyline</param>
		[MethodImpl( INLINE )] public static void Polyline( PolylinePath path, float thickness, PolylineJoins joins, Color color ) => Polyline_Internal( path, false, PolylineGeometry, joins, thickness, ThicknessSpace, color );
		/// <summary>Draws a polyline, given an existing polyline path</summary><param name="path">The path to use when drawing. Note: be sure to call myPolylinePath.Dispose() when you are done with it, or use it inside of using-statements</param><param name="closed">Whether or not this polyline should be a closed loop</param><param name="thickness">The thickness of the polyline</param><param name="joins">What type of joins to use</param><param name="color">The color of the polyline</param>
		[MethodImpl( INLINE )] public static void Polyline( PolylinePath path, bool closed, float thickness, PolylineJoins joins, Color color ) => Polyline_Internal( path, closed, PolylineGeometry, joins, thickness, ThicknessSpace, color );
		/// <summary>Draws a simple polygon, given an existing polygon path</summary><param name="path">The path to use when drawing. Note: Be be sure to call myPolygonPath.Dispose() when you are done with it, or use it inside of using-statements</param>
		[MethodImpl( INLINE )] public static void Polygon( PolygonPath path ) => Polygon_Internal( path, PolygonTriangulation, Color );
		/// <summary>Draws a simple polygon, given an existing polygon path</summary><param name="path">The path to use when drawing. Note: Be be sure to call myPolygonPath.Dispose() when you are done with it, or use it inside of using-statements</param><param name="color">The color of the polygon</param>
		[MethodImpl( INLINE )] public static void Polygon( PolygonPath path, Color color ) => Polygon_Internal( path, PolygonTriangulation, color );
		/// <summary>Draws a simple polygon, given an existing polygon path</summary><param name="path">The path to use when drawing. Note: Be be sure to call myPolygonPath.Dispose() when you are done with it, or use it inside of using-statements</param><param name="triangulation">The triangulation method to use. Some of these are computationally faster than others, but only works for certain shapes</param>
		[MethodImpl( INLINE )] public static void Polygon( PolygonPath path, PolygonTriangulation triangulation ) => Polygon_Internal( path, triangulation, Color );
		/// <summary>Draws a simple polygon, given an existing polygon path</summary><param name="path">The path to use when drawing. Note: Be be sure to call myPolygonPath.Dispose() when you are done with it, or use it inside of using-statements</param><param name="triangulation">The triangulation method to use. Some of these are computationally faster than others, but only works for certain shapes</param><param name="color">The color of the polygon</param>
		[MethodImpl( INLINE )] public static void Polygon( PolygonPath path, PolygonTriangulation triangulation, Color color ) => Polygon_Internal( path, triangulation, color );
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( Vector3 pos ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, Radius, Thickness, Color, false, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( Vector3 pos, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, Radius, Thickness, color, false, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( Vector3 pos, float radius ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, Thickness, Color, false, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( Vector3 pos, float radius, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, Thickness, color, false, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( Vector3 pos, float radius, float angle ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, Thickness, Color, false, 0f, angle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( Vector3 pos, float radius, float angle, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, Thickness, color, false, 0f, angle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( Vector3 pos, float radius, float angle, float roundness ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, Thickness, Color, false, roundness, angle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( Vector3 pos, float radius, float angle, float roundness, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, Thickness, color, false, roundness, angle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( Vector3 pos, int sideCount ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, Radius, Thickness, Color, false, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( Vector3 pos, int sideCount, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, Radius, Thickness, color, false, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( Vector3 pos, int sideCount, float radius ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, Thickness, Color, false, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( Vector3 pos, int sideCount, float radius, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, Thickness, color, false, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( Vector3 pos, int sideCount, float radius, float angle ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, Thickness, Color, false, 0f, angle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( Vector3 pos, int sideCount, float radius, float angle, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, Thickness, color, false, 0f, angle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( Vector3 pos, int sideCount, float radius, float angle, float roundness ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, Thickness, Color, false, roundness, angle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( Vector3 pos, int sideCount, float radius, float angle, float roundness, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, Thickness, color, false, roundness, angle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( Vector3 pos, Vector3 normal ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, Radius, Thickness, Color, false, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( Vector3 pos, Vector3 normal, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, Radius, Thickness, color, false, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( Vector3 pos, Vector3 normal, float radius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, Thickness, Color, false, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( Vector3 pos, Vector3 normal, float radius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, Thickness, color, false, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( Vector3 pos, Vector3 normal, float radius, float angle ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, Thickness, Color, false, 0f, angle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( Vector3 pos, Vector3 normal, float radius, float angle, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, Thickness, color, false, 0f, angle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( Vector3 pos, Vector3 normal, float radius, float angle, float roundness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, Thickness, Color, false, roundness, angle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( Vector3 pos, Vector3 normal, float radius, float angle, float roundness, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, Thickness, color, false, roundness, angle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( Vector3 pos, Vector3 normal, int sideCount ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, Radius, Thickness, Color, false, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( Vector3 pos, Vector3 normal, int sideCount, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, Radius, Thickness, color, false, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( Vector3 pos, Vector3 normal, int sideCount, float radius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, Thickness, Color, false, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( Vector3 pos, Vector3 normal, int sideCount, float radius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, Thickness, color, false, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( Vector3 pos, Vector3 normal, int sideCount, float radius, float angle ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, Thickness, Color, false, 0f, angle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( Vector3 pos, Vector3 normal, int sideCount, float radius, float angle, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, Thickness, color, false, 0f, angle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( Vector3 pos, Vector3 normal, int sideCount, float radius, float angle, float roundness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, Thickness, Color, false, roundness, angle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( Vector3 pos, Vector3 normal, int sideCount, float radius, float angle, float roundness, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, Thickness, color, false, roundness, angle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( Vector3 pos, Quaternion rot ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, Radius, Thickness, Color, false, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( Vector3 pos, Quaternion rot, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, Radius, Thickness, color, false, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( Vector3 pos, Quaternion rot, float radius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, Thickness, Color, false, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( Vector3 pos, Quaternion rot, float radius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, Thickness, color, false, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( Vector3 pos, Quaternion rot, float radius, float angle ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, Thickness, Color, false, 0f, angle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( Vector3 pos, Quaternion rot, float radius, float angle, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, Thickness, color, false, 0f, angle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( Vector3 pos, Quaternion rot, float radius, float angle, float roundness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, Thickness, Color, false, roundness, angle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( Vector3 pos, Quaternion rot, float radius, float angle, float roundness, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, Thickness, color, false, roundness, angle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( Vector3 pos, Quaternion rot, int sideCount ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, Radius, Thickness, Color, false, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( Vector3 pos, Quaternion rot, int sideCount, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, Radius, Thickness, color, false, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( Vector3 pos, Quaternion rot, int sideCount, float radius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, Thickness, Color, false, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( Vector3 pos, Quaternion rot, int sideCount, float radius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, Thickness, color, false, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( Vector3 pos, Quaternion rot, int sideCount, float radius, float angle ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, Thickness, Color, false, 0f, angle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( Vector3 pos, Quaternion rot, int sideCount, float radius, float angle, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, Thickness, color, false, 0f, angle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( Vector3 pos, Quaternion rot, int sideCount, float radius, float angle, float roundness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, Thickness, Color, false, roundness, angle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( Vector3 pos, Quaternion rot, int sideCount, float radius, float angle, float roundness, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, Thickness, color, false, roundness, angle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary>
		[MethodImpl( INLINE )] public static void RegularPolygon() => RegularPolygon_Internal( RegularPolygonSideCount, Radius, Thickness, Color, false, 0f, 0f );
		/// <summary>Draws a regular polygon</summary><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( Color color ) => RegularPolygon_Internal( RegularPolygonSideCount, Radius, Thickness, color, false, 0f, 0f );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( float radius ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, Thickness, Color, false, 0f, 0f );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( float radius, Color color ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, Thickness, color, false, 0f, 0f );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( float radius, float angle ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, Thickness, Color, false, 0f, angle );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( float radius, float angle, Color color ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, Thickness, color, false, 0f, angle );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( float radius, float angle, float roundness ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, Thickness, Color, false, roundness, angle );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( float radius, float angle, float roundness, Color color ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, Thickness, color, false, roundness, angle );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( int sideCount ) => RegularPolygon_Internal( sideCount, Radius, Thickness, Color, false, 0f, 0f );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( int sideCount, Color color ) => RegularPolygon_Internal( sideCount, Radius, Thickness, color, false, 0f, 0f );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( int sideCount, float radius ) => RegularPolygon_Internal( sideCount, radius, Thickness, Color, false, 0f, 0f );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( int sideCount, float radius, Color color ) => RegularPolygon_Internal( sideCount, radius, Thickness, color, false, 0f, 0f );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( int sideCount, float radius, float angle ) => RegularPolygon_Internal( sideCount, radius, Thickness, Color, false, 0f, angle );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( int sideCount, float radius, float angle, Color color ) => RegularPolygon_Internal( sideCount, radius, Thickness, color, false, 0f, angle );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( int sideCount, float radius, float angle, float roundness ) => RegularPolygon_Internal( sideCount, radius, Thickness, Color, false, roundness, angle );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygon( int sideCount, float radius, float angle, float roundness, Color color ) => RegularPolygon_Internal( sideCount, radius, Thickness, color, false, roundness, angle );
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, Radius, Thickness, Color, true, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, Radius, Thickness, color, true, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, float radius ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, Thickness, Color, true, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, float radius, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, Thickness, color, true, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, float radius, float thickness ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, float radius, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, color, true, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, float radius, float thickness, float angle ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, 0f, angle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, float radius, float thickness, float angle, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, color, true, 0f, angle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, float radius, float thickness, float angle, float roundness ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, roundness, angle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, float radius, float thickness, float angle, float roundness, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, color, true, roundness, angle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, int sideCount ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, Radius, Thickness, Color, true, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, int sideCount, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, Radius, Thickness, color, true, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, int sideCount, float radius ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, Thickness, Color, true, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, int sideCount, float radius, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, Thickness, color, true, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, int sideCount, float radius, float thickness ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, thickness, Color, true, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, int sideCount, float radius, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, thickness, color, true, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, int sideCount, float radius, float thickness, float angle ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, thickness, Color, true, 0f, angle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, int sideCount, float radius, float thickness, float angle, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, thickness, color, true, 0f, angle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, int sideCount, float radius, float thickness, float angle, float roundness ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, thickness, Color, true, roundness, angle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, int sideCount, float radius, float thickness, float angle, float roundness, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, thickness, color, true, roundness, angle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, Vector3 normal ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, Radius, Thickness, Color, true, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, Vector3 normal, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, Radius, Thickness, color, true, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, Vector3 normal, float radius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, Thickness, Color, true, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, Vector3 normal, float radius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, Thickness, color, true, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, Vector3 normal, float radius, float thickness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, Vector3 normal, float radius, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, color, true, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, Vector3 normal, float radius, float thickness, float angle ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, 0f, angle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, Vector3 normal, float radius, float thickness, float angle, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, color, true, 0f, angle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, Vector3 normal, float radius, float thickness, float angle, float roundness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, roundness, angle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, Vector3 normal, float radius, float thickness, float angle, float roundness, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, color, true, roundness, angle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, Vector3 normal, int sideCount ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, Radius, Thickness, Color, true, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, Vector3 normal, int sideCount, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, Radius, Thickness, color, true, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, Vector3 normal, int sideCount, float radius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, Thickness, Color, true, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, Vector3 normal, int sideCount, float radius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, Thickness, color, true, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, Vector3 normal, int sideCount, float radius, float thickness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, thickness, Color, true, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, Vector3 normal, int sideCount, float radius, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, thickness, color, true, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, Vector3 normal, int sideCount, float radius, float thickness, float angle ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, thickness, Color, true, 0f, angle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, Vector3 normal, int sideCount, float radius, float thickness, float angle, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, thickness, color, true, 0f, angle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, Vector3 normal, int sideCount, float radius, float thickness, float angle, float roundness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, thickness, Color, true, roundness, angle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, Vector3 normal, int sideCount, float radius, float thickness, float angle, float roundness, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, thickness, color, true, roundness, angle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, Quaternion rot ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, Radius, Thickness, Color, true, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, Quaternion rot, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, Radius, Thickness, color, true, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, Quaternion rot, float radius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, Thickness, Color, true, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, Quaternion rot, float radius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, Thickness, color, true, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, Quaternion rot, float radius, float thickness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, Quaternion rot, float radius, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, color, true, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, Quaternion rot, float radius, float thickness, float angle ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, 0f, angle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, Quaternion rot, float radius, float thickness, float angle, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, color, true, 0f, angle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, Quaternion rot, float radius, float thickness, float angle, float roundness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, roundness, angle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, Quaternion rot, float radius, float thickness, float angle, float roundness, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, color, true, roundness, angle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, Quaternion rot, int sideCount ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, Radius, Thickness, Color, true, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, Quaternion rot, int sideCount, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, Radius, Thickness, color, true, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, Quaternion rot, int sideCount, float radius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, Thickness, Color, true, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, Quaternion rot, int sideCount, float radius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, Thickness, color, true, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, Quaternion rot, int sideCount, float radius, float thickness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, thickness, Color, true, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, Quaternion rot, int sideCount, float radius, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, thickness, color, true, 0f, 0f );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, Quaternion rot, int sideCount, float radius, float thickness, float angle ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, thickness, Color, true, 0f, angle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, Quaternion rot, int sideCount, float radius, float thickness, float angle, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, thickness, color, true, 0f, angle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, Quaternion rot, int sideCount, float radius, float thickness, float angle, float roundness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, thickness, Color, true, roundness, angle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Vector3 pos, Quaternion rot, int sideCount, float radius, float thickness, float angle, float roundness, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, thickness, color, true, roundness, angle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder() => RegularPolygon_Internal( RegularPolygonSideCount, Radius, Thickness, Color, true, 0f, 0f );
		/// <summary>Draws a regular polygon</summary><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( Color color ) => RegularPolygon_Internal( RegularPolygonSideCount, Radius, Thickness, color, true, 0f, 0f );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( float radius ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, Thickness, Color, true, 0f, 0f );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( float radius, Color color ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, Thickness, color, true, 0f, 0f );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( float radius, float thickness ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, 0f, 0f );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( float radius, float thickness, Color color ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, color, true, 0f, 0f );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( float radius, float thickness, float angle ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, 0f, angle );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( float radius, float thickness, float angle, Color color ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, color, true, 0f, angle );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( float radius, float thickness, float angle, float roundness ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, roundness, angle );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( float radius, float thickness, float angle, float roundness, Color color ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, color, true, roundness, angle );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( int sideCount ) => RegularPolygon_Internal( sideCount, Radius, Thickness, Color, true, 0f, 0f );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( int sideCount, Color color ) => RegularPolygon_Internal( sideCount, Radius, Thickness, color, true, 0f, 0f );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( int sideCount, float radius ) => RegularPolygon_Internal( sideCount, radius, Thickness, Color, true, 0f, 0f );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( int sideCount, float radius, Color color ) => RegularPolygon_Internal( sideCount, radius, Thickness, color, true, 0f, 0f );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( int sideCount, float radius, float thickness ) => RegularPolygon_Internal( sideCount, radius, thickness, Color, true, 0f, 0f );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( int sideCount, float radius, float thickness, Color color ) => RegularPolygon_Internal( sideCount, radius, thickness, color, true, 0f, 0f );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( int sideCount, float radius, float thickness, float angle ) => RegularPolygon_Internal( sideCount, radius, thickness, Color, true, 0f, angle );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( int sideCount, float radius, float thickness, float angle, Color color ) => RegularPolygon_Internal( sideCount, radius, thickness, color, true, 0f, angle );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( int sideCount, float radius, float thickness, float angle, float roundness ) => RegularPolygon_Internal( sideCount, radius, thickness, Color, true, roundness, angle );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="color">The color of the regular polygon</param>
		[MethodImpl( INLINE )] public static void RegularPolygonBorder( int sideCount, float radius, float thickness, float angle, float roundness, Color color ) => RegularPolygon_Internal( sideCount, radius, thickness, color, true, roundness, angle );
		/// <summary>Draws a solid filled disc</summary><param name="pos">The position of the disc</param>
		[MethodImpl( INLINE )] public static void Disc( Vector3 pos ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Disc_Internal( Radius, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled disc</summary><param name="pos">The position of the disc</param><param name="colors">The color of the disc. This can be either a single color, or you can use DiscColor.Radial(), DiscColors.Angular() or DiscColors.Bilinear() for gradients</param>
		[MethodImpl( INLINE )] public static void Disc( Vector3 pos, DiscColors colors ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Disc_Internal( Radius, colors );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled disc</summary><param name="pos">The position of the disc</param><param name="radius">The radius of this disc</param>
		[MethodImpl( INLINE )] public static void Disc( Vector3 pos, float radius ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Disc_Internal( radius, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled disc</summary><param name="pos">The position of the disc</param><param name="radius">The radius of this disc</param><param name="colors">The color of the disc. This can be either a single color, or you can use DiscColor.Radial(), DiscColors.Angular() or DiscColors.Bilinear() for gradients</param>
		[MethodImpl( INLINE )] public static void Disc( Vector3 pos, float radius, DiscColors colors ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Disc_Internal( radius, colors );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled disc</summary><param name="pos">The position of the disc</param><param name="normal">The normal direction of the disc</param>
		[MethodImpl( INLINE )] public static void Disc( Vector3 pos, Vector3 normal ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Disc_Internal( Radius, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled disc</summary><param name="pos">The position of the disc</param><param name="normal">The normal direction of the disc</param><param name="colors">The color of the disc. This can be either a single color, or you can use DiscColor.Radial(), DiscColors.Angular() or DiscColors.Bilinear() for gradients</param>
		[MethodImpl( INLINE )] public static void Disc( Vector3 pos, Vector3 normal, DiscColors colors ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Disc_Internal( Radius, colors );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled disc</summary><param name="pos">The position of the disc</param><param name="normal">The normal direction of the disc</param><param name="radius">The radius of this disc</param>
		[MethodImpl( INLINE )] public static void Disc( Vector3 pos, Vector3 normal, float radius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Disc_Internal( radius, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled disc</summary><param name="pos">The position of the disc</param><param name="normal">The normal direction of the disc</param><param name="radius">The radius of this disc</param><param name="colors">The color of the disc. This can be either a single color, or you can use DiscColor.Radial(), DiscColors.Angular() or DiscColors.Bilinear() for gradients</param>
		[MethodImpl( INLINE )] public static void Disc( Vector3 pos, Vector3 normal, float radius, DiscColors colors ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Disc_Internal( radius, colors );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled disc</summary><param name="pos">The position of the disc</param><param name="rot">The orientation of the disc</param>
		[MethodImpl( INLINE )] public static void Disc( Vector3 pos, Quaternion rot ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Disc_Internal( Radius, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled disc</summary><param name="pos">The position of the disc</param><param name="rot">The orientation of the disc</param><param name="colors">The color of the disc. This can be either a single color, or you can use DiscColor.Radial(), DiscColors.Angular() or DiscColors.Bilinear() for gradients</param>
		[MethodImpl( INLINE )] public static void Disc( Vector3 pos, Quaternion rot, DiscColors colors ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Disc_Internal( Radius, colors );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled disc</summary><param name="pos">The position of the disc</param><param name="rot">The orientation of the disc</param><param name="radius">The radius of this disc</param>
		[MethodImpl( INLINE )] public static void Disc( Vector3 pos, Quaternion rot, float radius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Disc_Internal( radius, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled disc</summary><param name="pos">The position of the disc</param><param name="rot">The orientation of the disc</param><param name="radius">The radius of this disc</param><param name="colors">The color of the disc. This can be either a single color, or you can use DiscColor.Radial(), DiscColors.Angular() or DiscColors.Bilinear() for gradients</param>
		[MethodImpl( INLINE )] public static void Disc( Vector3 pos, Quaternion rot, float radius, DiscColors colors ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Disc_Internal( radius, colors );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled disc</summary>
		[MethodImpl( INLINE )] public static void Disc() => Disc_Internal( Radius, Color );
		/// <summary>Draws a solid filled disc</summary><param name="colors">The color of the disc. This can be either a single color, or you can use DiscColor.Radial(), DiscColors.Angular() or DiscColors.Bilinear() for gradients</param>
		[MethodImpl( INLINE )] public static void Disc( DiscColors colors ) => Disc_Internal( Radius, colors );
		/// <summary>Draws a solid filled disc</summary><param name="radius">The radius of this disc</param>
		[MethodImpl( INLINE )] public static void Disc( float radius ) => Disc_Internal( radius, Color );
		/// <summary>Draws a solid filled disc</summary><param name="radius">The radius of this disc</param><param name="colors">The color of the disc. This can be either a single color, or you can use DiscColor.Radial(), DiscColors.Angular() or DiscColors.Bilinear() for gradients</param>
		[MethodImpl( INLINE )] public static void Disc( float radius, DiscColors colors ) => Disc_Internal( radius, colors );
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param>
		[MethodImpl( INLINE )] public static void Ring( Vector3 pos ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Ring_Internal( Radius, Thickness, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="colors">The color of the ring. This can be either a single color, or you can use DiscColor.Radial(), DiscColors.Angular() or DiscColors.Bilinear() for gradients</param>
		[MethodImpl( INLINE )] public static void Ring( Vector3 pos, DiscColors colors ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Ring_Internal( Radius, Thickness, colors );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="radius">The radius of this ring</param>
		[MethodImpl( INLINE )] public static void Ring( Vector3 pos, float radius ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Ring_Internal( radius, Thickness, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="radius">The radius of this ring</param><param name="colors">The color of the ring. This can be either a single color, or you can use DiscColor.Radial(), DiscColors.Angular() or DiscColors.Bilinear() for gradients</param>
		[MethodImpl( INLINE )] public static void Ring( Vector3 pos, float radius, DiscColors colors ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Ring_Internal( radius, Thickness, colors );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param>
		[MethodImpl( INLINE )] public static void Ring( Vector3 pos, float radius, float thickness ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Ring_Internal( radius, thickness, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param><param name="colors">The color of the ring. This can be either a single color, or you can use DiscColor.Radial(), DiscColors.Angular() or DiscColors.Bilinear() for gradients</param>
		[MethodImpl( INLINE )] public static void Ring( Vector3 pos, float radius, float thickness, DiscColors colors ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Ring_Internal( radius, thickness, colors );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="normal">The normal direction of the ring</param>
		[MethodImpl( INLINE )] public static void Ring( Vector3 pos, Vector3 normal ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Ring_Internal( Radius, Thickness, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="normal">The normal direction of the ring</param><param name="colors">The color of the ring. This can be either a single color, or you can use DiscColor.Radial(), DiscColors.Angular() or DiscColors.Bilinear() for gradients</param>
		[MethodImpl( INLINE )] public static void Ring( Vector3 pos, Vector3 normal, DiscColors colors ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Ring_Internal( Radius, Thickness, colors );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="normal">The normal direction of the ring</param><param name="radius">The radius of this ring</param>
		[MethodImpl( INLINE )] public static void Ring( Vector3 pos, Vector3 normal, float radius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Ring_Internal( radius, Thickness, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="normal">The normal direction of the ring</param><param name="radius">The radius of this ring</param><param name="colors">The color of the ring. This can be either a single color, or you can use DiscColor.Radial(), DiscColors.Angular() or DiscColors.Bilinear() for gradients</param>
		[MethodImpl( INLINE )] public static void Ring( Vector3 pos, Vector3 normal, float radius, DiscColors colors ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Ring_Internal( radius, Thickness, colors );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="normal">The normal direction of the ring</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param>
		[MethodImpl( INLINE )] public static void Ring( Vector3 pos, Vector3 normal, float radius, float thickness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Ring_Internal( radius, thickness, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="normal">The normal direction of the ring</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param><param name="colors">The color of the ring. This can be either a single color, or you can use DiscColor.Radial(), DiscColors.Angular() or DiscColors.Bilinear() for gradients</param>
		[MethodImpl( INLINE )] public static void Ring( Vector3 pos, Vector3 normal, float radius, float thickness, DiscColors colors ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Ring_Internal( radius, thickness, colors );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="rot">The orientation of the ring</param>
		[MethodImpl( INLINE )] public static void Ring( Vector3 pos, Quaternion rot ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Ring_Internal( Radius, Thickness, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="rot">The orientation of the ring</param><param name="colors">The color of the ring. This can be either a single color, or you can use DiscColor.Radial(), DiscColors.Angular() or DiscColors.Bilinear() for gradients</param>
		[MethodImpl( INLINE )] public static void Ring( Vector3 pos, Quaternion rot, DiscColors colors ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Ring_Internal( Radius, Thickness, colors );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="rot">The orientation of the ring</param><param name="radius">The radius of this ring</param>
		[MethodImpl( INLINE )] public static void Ring( Vector3 pos, Quaternion rot, float radius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Ring_Internal( radius, Thickness, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="rot">The orientation of the ring</param><param name="radius">The radius of this ring</param><param name="colors">The color of the ring. This can be either a single color, or you can use DiscColor.Radial(), DiscColors.Angular() or DiscColors.Bilinear() for gradients</param>
		[MethodImpl( INLINE )] public static void Ring( Vector3 pos, Quaternion rot, float radius, DiscColors colors ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Ring_Internal( radius, Thickness, colors );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="rot">The orientation of the ring</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param>
		[MethodImpl( INLINE )] public static void Ring( Vector3 pos, Quaternion rot, float radius, float thickness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Ring_Internal( radius, thickness, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="rot">The orientation of the ring</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param><param name="colors">The color of the ring. This can be either a single color, or you can use DiscColor.Radial(), DiscColors.Angular() or DiscColors.Bilinear() for gradients</param>
		[MethodImpl( INLINE )] public static void Ring( Vector3 pos, Quaternion rot, float radius, float thickness, DiscColors colors ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Ring_Internal( radius, thickness, colors );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary>
		[MethodImpl( INLINE )] public static void Ring() => Ring_Internal( Radius, Thickness, Color );
		/// <summary>Draws a ring (circle)</summary><param name="colors">The color of the ring. This can be either a single color, or you can use DiscColor.Radial(), DiscColors.Angular() or DiscColors.Bilinear() for gradients</param>
		[MethodImpl( INLINE )] public static void Ring( DiscColors colors ) => Ring_Internal( Radius, Thickness, colors );
		/// <summary>Draws a ring (circle)</summary><param name="radius">The radius of this ring</param>
		[MethodImpl( INLINE )] public static void Ring( float radius ) => Ring_Internal( radius, Thickness, Color );
		/// <summary>Draws a ring (circle)</summary><param name="radius">The radius of this ring</param><param name="colors">The color of the ring. This can be either a single color, or you can use DiscColor.Radial(), DiscColors.Angular() or DiscColors.Bilinear() for gradients</param>
		[MethodImpl( INLINE )] public static void Ring( float radius, DiscColors colors ) => Ring_Internal( radius, Thickness, colors );
		/// <summary>Draws a ring (circle)</summary><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param>
		[MethodImpl( INLINE )] public static void Ring( float radius, float thickness ) => Ring_Internal( radius, thickness, Color );
		/// <summary>Draws a ring (circle)</summary><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param><param name="colors">The color of the ring. This can be either a single color, or you can use DiscColor.Radial(), DiscColors.Angular() or DiscColors.Bilinear() for gradients</param>
		[MethodImpl( INLINE )] public static void Ring( float radius, float thickness, DiscColors colors ) => Ring_Internal( radius, thickness, colors );
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="pos">The position of the pie</param><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param>
		[MethodImpl( INLINE )] public static void Pie( Vector3 pos, float angleRadStart, float angleRadEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Pie_Internal( Radius, Color, angleRadStart, angleRadEnd );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="pos">The position of the pie</param><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param><param name="colors">The color of the pie. This can be either a single color, or you can use DiscColor.Radial(), DiscColors.Angular() or DiscColors.Bilinear() for gradients</param>
		[MethodImpl( INLINE )] public static void Pie( Vector3 pos, float angleRadStart, float angleRadEnd, DiscColors colors ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Pie_Internal( Radius, colors, angleRadStart, angleRadEnd );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="pos">The position of the pie</param><param name="radius">The radius of this pie</param><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param>
		[MethodImpl( INLINE )] public static void Pie( Vector3 pos, float radius, float angleRadStart, float angleRadEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Pie_Internal( radius, Color, angleRadStart, angleRadEnd );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="pos">The position of the pie</param><param name="radius">The radius of this pie</param><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param><param name="colors">The color of the pie. This can be either a single color, or you can use DiscColor.Radial(), DiscColors.Angular() or DiscColors.Bilinear() for gradients</param>
		[MethodImpl( INLINE )] public static void Pie( Vector3 pos, float radius, float angleRadStart, float angleRadEnd, DiscColors colors ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Pie_Internal( radius, colors, angleRadStart, angleRadEnd );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="pos">The position of the pie</param><param name="normal">The normal direction of the pie</param><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param>
		[MethodImpl( INLINE )] public static void Pie( Vector3 pos, Vector3 normal, float angleRadStart, float angleRadEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Pie_Internal( Radius, Color, angleRadStart, angleRadEnd );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="pos">The position of the pie</param><param name="normal">The normal direction of the pie</param><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param><param name="colors">The color of the pie. This can be either a single color, or you can use DiscColor.Radial(), DiscColors.Angular() or DiscColors.Bilinear() for gradients</param>
		[MethodImpl( INLINE )] public static void Pie( Vector3 pos, Vector3 normal, float angleRadStart, float angleRadEnd, DiscColors colors ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Pie_Internal( Radius, colors, angleRadStart, angleRadEnd );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="pos">The position of the pie</param><param name="normal">The normal direction of the pie</param><param name="radius">The radius of this pie</param><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param>
		[MethodImpl( INLINE )] public static void Pie( Vector3 pos, Vector3 normal, float radius, float angleRadStart, float angleRadEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Pie_Internal( radius, Color, angleRadStart, angleRadEnd );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="pos">The position of the pie</param><param name="normal">The normal direction of the pie</param><param name="radius">The radius of this pie</param><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param><param name="colors">The color of the pie. This can be either a single color, or you can use DiscColor.Radial(), DiscColors.Angular() or DiscColors.Bilinear() for gradients</param>
		[MethodImpl( INLINE )] public static void Pie( Vector3 pos, Vector3 normal, float radius, float angleRadStart, float angleRadEnd, DiscColors colors ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Pie_Internal( radius, colors, angleRadStart, angleRadEnd );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="pos">The position of the pie</param><param name="rot">The orientation of the pie</param><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param>
		[MethodImpl( INLINE )] public static void Pie( Vector3 pos, Quaternion rot, float angleRadStart, float angleRadEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Pie_Internal( Radius, Color, angleRadStart, angleRadEnd );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="pos">The position of the pie</param><param name="rot">The orientation of the pie</param><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param><param name="colors">The color of the pie. This can be either a single color, or you can use DiscColor.Radial(), DiscColors.Angular() or DiscColors.Bilinear() for gradients</param>
		[MethodImpl( INLINE )] public static void Pie( Vector3 pos, Quaternion rot, float angleRadStart, float angleRadEnd, DiscColors colors ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Pie_Internal( Radius, colors, angleRadStart, angleRadEnd );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="pos">The position of the pie</param><param name="rot">The orientation of the pie</param><param name="radius">The radius of this pie</param><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param>
		[MethodImpl( INLINE )] public static void Pie( Vector3 pos, Quaternion rot, float radius, float angleRadStart, float angleRadEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Pie_Internal( radius, Color, angleRadStart, angleRadEnd );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="pos">The position of the pie</param><param name="rot">The orientation of the pie</param><param name="radius">The radius of this pie</param><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param><param name="colors">The color of the pie. This can be either a single color, or you can use DiscColor.Radial(), DiscColors.Angular() or DiscColors.Bilinear() for gradients</param>
		[MethodImpl( INLINE )] public static void Pie( Vector3 pos, Quaternion rot, float radius, float angleRadStart, float angleRadEnd, DiscColors colors ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Pie_Internal( radius, colors, angleRadStart, angleRadEnd );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param>
		[MethodImpl( INLINE )] public static void Pie( float angleRadStart, float angleRadEnd ) => Pie_Internal( Radius, Color, angleRadStart, angleRadEnd );
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param><param name="colors">The color of the pie. This can be either a single color, or you can use DiscColor.Radial(), DiscColors.Angular() or DiscColors.Bilinear() for gradients</param>
		[MethodImpl( INLINE )] public static void Pie( float angleRadStart, float angleRadEnd, DiscColors colors ) => Pie_Internal( Radius, colors, angleRadStart, angleRadEnd );
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="radius">The radius of this pie</param><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param>
		[MethodImpl( INLINE )] public static void Pie( float radius, float angleRadStart, float angleRadEnd ) => Pie_Internal( radius, Color, angleRadStart, angleRadEnd );
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="radius">The radius of this pie</param><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param><param name="colors">The color of the pie. This can be either a single color, or you can use DiscColor.Radial(), DiscColors.Angular() or DiscColors.Bilinear() for gradients</param>
		[MethodImpl( INLINE )] public static void Pie( float radius, float angleRadStart, float angleRadEnd, DiscColors colors ) => Pie_Internal( radius, colors, angleRadStart, angleRadEnd );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param>
		[MethodImpl( INLINE )] public static void Arc( Vector3 pos, float angleRadStart, float angleRadEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( Radius, Thickness, Color, angleRadStart, angleRadEnd, ArcEndCap.None );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colors">The color of the arc. This can be either a single color, or you can use DiscColor.Radial(), DiscColors.Angular() or DiscColors.Bilinear() for gradients</param>
		[MethodImpl( INLINE )] public static void Arc( Vector3 pos, float angleRadStart, float angleRadEnd, DiscColors colors ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( Radius, Thickness, colors, angleRadStart, angleRadEnd, ArcEndCap.None );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param>
		[MethodImpl( INLINE )] public static void Arc( Vector3 pos, float angleRadStart, float angleRadEnd, ArcEndCap endCaps ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( Radius, Thickness, Color, angleRadStart, angleRadEnd, endCaps );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colors">The color of the arc. This can be either a single color, or you can use DiscColor.Radial(), DiscColors.Angular() or DiscColors.Bilinear() for gradients</param>
		[MethodImpl( INLINE )] public static void Arc( Vector3 pos, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, DiscColors colors ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( Radius, Thickness, colors, angleRadStart, angleRadEnd, endCaps );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param>
		[MethodImpl( INLINE )] public static void Arc( Vector3 pos, float radius, float angleRadStart, float angleRadEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, Thickness, Color, angleRadStart, angleRadEnd, ArcEndCap.None );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colors">The color of the arc. This can be either a single color, or you can use DiscColor.Radial(), DiscColors.Angular() or DiscColors.Bilinear() for gradients</param>
		[MethodImpl( INLINE )] public static void Arc( Vector3 pos, float radius, float angleRadStart, float angleRadEnd, DiscColors colors ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, Thickness, colors, angleRadStart, angleRadEnd, ArcEndCap.None );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param>
		[MethodImpl( INLINE )] public static void Arc( Vector3 pos, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, Thickness, Color, angleRadStart, angleRadEnd, endCaps );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colors">The color of the arc. This can be either a single color, or you can use DiscColor.Radial(), DiscColors.Angular() or DiscColors.Bilinear() for gradients</param>
		[MethodImpl( INLINE )] public static void Arc( Vector3 pos, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, DiscColors colors ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, Thickness, colors, angleRadStart, angleRadEnd, endCaps );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param>
		[MethodImpl( INLINE )] public static void Arc( Vector3 pos, float radius, float thickness, float angleRadStart, float angleRadEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, thickness, Color, angleRadStart, angleRadEnd, ArcEndCap.None );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colors">The color of the arc. This can be either a single color, or you can use DiscColor.Radial(), DiscColors.Angular() or DiscColors.Bilinear() for gradients</param>
		[MethodImpl( INLINE )] public static void Arc( Vector3 pos, float radius, float thickness, float angleRadStart, float angleRadEnd, DiscColors colors ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, thickness, colors, angleRadStart, angleRadEnd, ArcEndCap.None );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param>
		[MethodImpl( INLINE )] public static void Arc( Vector3 pos, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, thickness, Color, angleRadStart, angleRadEnd, endCaps );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colors">The color of the arc. This can be either a single color, or you can use DiscColor.Radial(), DiscColors.Angular() or DiscColors.Bilinear() for gradients</param>
		[MethodImpl( INLINE )] public static void Arc( Vector3 pos, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, DiscColors colors ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, thickness, colors, angleRadStart, angleRadEnd, endCaps );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param>
		[MethodImpl( INLINE )] public static void Arc( Vector3 pos, Vector3 normal, float angleRadStart, float angleRadEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( Radius, Thickness, Color, angleRadStart, angleRadEnd, ArcEndCap.None );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colors">The color of the arc. This can be either a single color, or you can use DiscColor.Radial(), DiscColors.Angular() or DiscColors.Bilinear() for gradients</param>
		[MethodImpl( INLINE )] public static void Arc( Vector3 pos, Vector3 normal, float angleRadStart, float angleRadEnd, DiscColors colors ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( Radius, Thickness, colors, angleRadStart, angleRadEnd, ArcEndCap.None );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param>
		[MethodImpl( INLINE )] public static void Arc( Vector3 pos, Vector3 normal, float angleRadStart, float angleRadEnd, ArcEndCap endCaps ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( Radius, Thickness, Color, angleRadStart, angleRadEnd, endCaps );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colors">The color of the arc. This can be either a single color, or you can use DiscColor.Radial(), DiscColors.Angular() or DiscColors.Bilinear() for gradients</param>
		[MethodImpl( INLINE )] public static void Arc( Vector3 pos, Vector3 normal, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, DiscColors colors ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( Radius, Thickness, colors, angleRadStart, angleRadEnd, endCaps );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param>
		[MethodImpl( INLINE )] public static void Arc( Vector3 pos, Vector3 normal, float radius, float angleRadStart, float angleRadEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, Thickness, Color, angleRadStart, angleRadEnd, ArcEndCap.None );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colors">The color of the arc. This can be either a single color, or you can use DiscColor.Radial(), DiscColors.Angular() or DiscColors.Bilinear() for gradients</param>
		[MethodImpl( INLINE )] public static void Arc( Vector3 pos, Vector3 normal, float radius, float angleRadStart, float angleRadEnd, DiscColors colors ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, Thickness, colors, angleRadStart, angleRadEnd, ArcEndCap.None );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param>
		[MethodImpl( INLINE )] public static void Arc( Vector3 pos, Vector3 normal, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, Thickness, Color, angleRadStart, angleRadEnd, endCaps );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colors">The color of the arc. This can be either a single color, or you can use DiscColor.Radial(), DiscColors.Angular() or DiscColors.Bilinear() for gradients</param>
		[MethodImpl( INLINE )] public static void Arc( Vector3 pos, Vector3 normal, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, DiscColors colors ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, Thickness, colors, angleRadStart, angleRadEnd, endCaps );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param>
		[MethodImpl( INLINE )] public static void Arc( Vector3 pos, Vector3 normal, float radius, float thickness, float angleRadStart, float angleRadEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, thickness, Color, angleRadStart, angleRadEnd, ArcEndCap.None );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colors">The color of the arc. This can be either a single color, or you can use DiscColor.Radial(), DiscColors.Angular() or DiscColors.Bilinear() for gradients</param>
		[MethodImpl( INLINE )] public static void Arc( Vector3 pos, Vector3 normal, float radius, float thickness, float angleRadStart, float angleRadEnd, DiscColors colors ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, thickness, colors, angleRadStart, angleRadEnd, ArcEndCap.None );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param>
		[MethodImpl( INLINE )] public static void Arc( Vector3 pos, Vector3 normal, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, thickness, Color, angleRadStart, angleRadEnd, endCaps );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colors">The color of the arc. This can be either a single color, or you can use DiscColor.Radial(), DiscColors.Angular() or DiscColors.Bilinear() for gradients</param>
		[MethodImpl( INLINE )] public static void Arc( Vector3 pos, Vector3 normal, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, DiscColors colors ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, thickness, colors, angleRadStart, angleRadEnd, endCaps );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param>
		[MethodImpl( INLINE )] public static void Arc( Vector3 pos, Quaternion rot, float angleRadStart, float angleRadEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( Radius, Thickness, Color, angleRadStart, angleRadEnd, ArcEndCap.None );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colors">The color of the arc. This can be either a single color, or you can use DiscColor.Radial(), DiscColors.Angular() or DiscColors.Bilinear() for gradients</param>
		[MethodImpl( INLINE )] public static void Arc( Vector3 pos, Quaternion rot, float angleRadStart, float angleRadEnd, DiscColors colors ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( Radius, Thickness, colors, angleRadStart, angleRadEnd, ArcEndCap.None );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param>
		[MethodImpl( INLINE )] public static void Arc( Vector3 pos, Quaternion rot, float angleRadStart, float angleRadEnd, ArcEndCap endCaps ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( Radius, Thickness, Color, angleRadStart, angleRadEnd, endCaps );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colors">The color of the arc. This can be either a single color, or you can use DiscColor.Radial(), DiscColors.Angular() or DiscColors.Bilinear() for gradients</param>
		[MethodImpl( INLINE )] public static void Arc( Vector3 pos, Quaternion rot, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, DiscColors colors ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( Radius, Thickness, colors, angleRadStart, angleRadEnd, endCaps );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param>
		[MethodImpl( INLINE )] public static void Arc( Vector3 pos, Quaternion rot, float radius, float angleRadStart, float angleRadEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, Thickness, Color, angleRadStart, angleRadEnd, ArcEndCap.None );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colors">The color of the arc. This can be either a single color, or you can use DiscColor.Radial(), DiscColors.Angular() or DiscColors.Bilinear() for gradients</param>
		[MethodImpl( INLINE )] public static void Arc( Vector3 pos, Quaternion rot, float radius, float angleRadStart, float angleRadEnd, DiscColors colors ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, Thickness, colors, angleRadStart, angleRadEnd, ArcEndCap.None );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param>
		[MethodImpl( INLINE )] public static void Arc( Vector3 pos, Quaternion rot, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, Thickness, Color, angleRadStart, angleRadEnd, endCaps );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colors">The color of the arc. This can be either a single color, or you can use DiscColor.Radial(), DiscColors.Angular() or DiscColors.Bilinear() for gradients</param>
		[MethodImpl( INLINE )] public static void Arc( Vector3 pos, Quaternion rot, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, DiscColors colors ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, Thickness, colors, angleRadStart, angleRadEnd, endCaps );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param>
		[MethodImpl( INLINE )] public static void Arc( Vector3 pos, Quaternion rot, float radius, float thickness, float angleRadStart, float angleRadEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, thickness, Color, angleRadStart, angleRadEnd, ArcEndCap.None );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colors">The color of the arc. This can be either a single color, or you can use DiscColor.Radial(), DiscColors.Angular() or DiscColors.Bilinear() for gradients</param>
		[MethodImpl( INLINE )] public static void Arc( Vector3 pos, Quaternion rot, float radius, float thickness, float angleRadStart, float angleRadEnd, DiscColors colors ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, thickness, colors, angleRadStart, angleRadEnd, ArcEndCap.None );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param>
		[MethodImpl( INLINE )] public static void Arc( Vector3 pos, Quaternion rot, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, thickness, Color, angleRadStart, angleRadEnd, endCaps );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colors">The color of the arc. This can be either a single color, or you can use DiscColor.Radial(), DiscColors.Angular() or DiscColors.Bilinear() for gradients</param>
		[MethodImpl( INLINE )] public static void Arc( Vector3 pos, Quaternion rot, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, DiscColors colors ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, thickness, colors, angleRadStart, angleRadEnd, endCaps );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param>
		[MethodImpl( INLINE )] public static void Arc( float angleRadStart, float angleRadEnd ) => Arc_Internal( Radius, Thickness, Color, angleRadStart, angleRadEnd, ArcEndCap.None );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colors">The color of the arc. This can be either a single color, or you can use DiscColor.Radial(), DiscColors.Angular() or DiscColors.Bilinear() for gradients</param>
		[MethodImpl( INLINE )] public static void Arc( float angleRadStart, float angleRadEnd, DiscColors colors ) => Arc_Internal( Radius, Thickness, colors, angleRadStart, angleRadEnd, ArcEndCap.None );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param>
		[MethodImpl( INLINE )] public static void Arc( float angleRadStart, float angleRadEnd, ArcEndCap endCaps ) => Arc_Internal( Radius, Thickness, Color, angleRadStart, angleRadEnd, endCaps );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colors">The color of the arc. This can be either a single color, or you can use DiscColor.Radial(), DiscColors.Angular() or DiscColors.Bilinear() for gradients</param>
		[MethodImpl( INLINE )] public static void Arc( float angleRadStart, float angleRadEnd, ArcEndCap endCaps, DiscColors colors ) => Arc_Internal( Radius, Thickness, colors, angleRadStart, angleRadEnd, endCaps );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param>
		[MethodImpl( INLINE )] public static void Arc( float radius, float angleRadStart, float angleRadEnd ) => Arc_Internal( radius, Thickness, Color, angleRadStart, angleRadEnd, ArcEndCap.None );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colors">The color of the arc. This can be either a single color, or you can use DiscColor.Radial(), DiscColors.Angular() or DiscColors.Bilinear() for gradients</param>
		[MethodImpl( INLINE )] public static void Arc( float radius, float angleRadStart, float angleRadEnd, DiscColors colors ) => Arc_Internal( radius, Thickness, colors, angleRadStart, angleRadEnd, ArcEndCap.None );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param>
		[MethodImpl( INLINE )] public static void Arc( float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps ) => Arc_Internal( radius, Thickness, Color, angleRadStart, angleRadEnd, endCaps );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colors">The color of the arc. This can be either a single color, or you can use DiscColor.Radial(), DiscColors.Angular() or DiscColors.Bilinear() for gradients</param>
		[MethodImpl( INLINE )] public static void Arc( float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, DiscColors colors ) => Arc_Internal( radius, Thickness, colors, angleRadStart, angleRadEnd, endCaps );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param>
		[MethodImpl( INLINE )] public static void Arc( float radius, float thickness, float angleRadStart, float angleRadEnd ) => Arc_Internal( radius, thickness, Color, angleRadStart, angleRadEnd, ArcEndCap.None );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colors">The color of the arc. This can be either a single color, or you can use DiscColor.Radial(), DiscColors.Angular() or DiscColors.Bilinear() for gradients</param>
		[MethodImpl( INLINE )] public static void Arc( float radius, float thickness, float angleRadStart, float angleRadEnd, DiscColors colors ) => Arc_Internal( radius, thickness, colors, angleRadStart, angleRadEnd, ArcEndCap.None );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param>
		[MethodImpl( INLINE )] public static void Arc( float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps ) => Arc_Internal( radius, thickness, Color, angleRadStart, angleRadEnd, endCaps );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colors">The color of the arc. This can be either a single color, or you can use DiscColor.Radial(), DiscColors.Angular() or DiscColors.Bilinear() for gradients</param>
		[MethodImpl( INLINE )] public static void Arc( float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, DiscColors colors ) => Arc_Internal( radius, thickness, colors, angleRadStart, angleRadEnd, endCaps );
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rect">The shape of the rectangle in local space</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Rect rect ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, rect, Color, Thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Rect rect, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, rect, color, Thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Rect rect, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, rect, Color, Thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Rect rect, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, rect, color, Thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Rect rect, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, rect, Color, Thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Rect rect, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, rect, color, Thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="rect">The shape of the rectangle in local space</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Vector3 normal, Rect rect ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, rect, Color, Thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Vector3 normal, Rect rect, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, rect, color, Thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Vector3 normal, Rect rect, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, rect, Color, Thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Vector3 normal, Rect rect, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, rect, color, Thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Vector3 normal, Rect rect, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, rect, Color, Thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Vector3 normal, Rect rect, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, rect, color, Thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="rect">The shape of the rectangle in local space</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Quaternion rot, Rect rect ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, rect, Color, Thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Quaternion rot, Rect rect, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, rect, color, Thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Quaternion rot, Rect rect, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, rect, Color, Thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Quaternion rot, Rect rect, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, rect, color, Thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Quaternion rot, Rect rect, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, rect, Color, Thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Quaternion rot, Rect rect, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, rect, color, Thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Vector2 size ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( size ), Color, Thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Vector2 size, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( size ), color, Thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Vector2 size, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( size ), Color, Thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Vector2 size, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( size ), color, Thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Vector2 size, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( size ), Color, Thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Vector2 size, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( size ), color, Thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, float width, float height ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( width, height ), Color, Thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, float width, float height, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( width, height ), color, Thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, float width, float height, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( width, height ), Color, Thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, float width, float height, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( width, height ), color, Thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, float width, float height, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( width, height ), Color, Thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, float width, float height, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( width, height ), color, Thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Vector3 normal, Vector2 size ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( size ), Color, Thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Vector3 normal, Vector2 size, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( size ), color, Thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Vector3 normal, Vector2 size, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( size ), Color, Thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Vector3 normal, Vector2 size, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( size ), color, Thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Vector3 normal, Vector2 size, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( size ), Color, Thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Vector3 normal, Vector2 size, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( size ), color, Thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Vector3 normal, float width, float height ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( width, height ), Color, Thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Vector3 normal, float width, float height, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( width, height ), color, Thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Vector3 normal, float width, float height, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( width, height ), Color, Thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Vector3 normal, float width, float height, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( width, height ), color, Thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Vector3 normal, float width, float height, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( width, height ), Color, Thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Vector3 normal, float width, float height, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( width, height ), color, Thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Quaternion rot, Vector2 size ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( size ), Color, Thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Quaternion rot, Vector2 size, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( size ), color, Thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Quaternion rot, Vector2 size, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( size ), Color, Thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Quaternion rot, Vector2 size, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( size ), color, Thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Quaternion rot, Vector2 size, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( size ), Color, Thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Quaternion rot, Vector2 size, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( size ), color, Thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Quaternion rot, float width, float height ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( width, height ), Color, Thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Quaternion rot, float width, float height, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( width, height ), color, Thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Quaternion rot, float width, float height, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( width, height ), Color, Thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Quaternion rot, float width, float height, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( width, height ), color, Thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Quaternion rot, float width, float height, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( width, height ), Color, Thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Quaternion rot, float width, float height, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( width, height ), color, Thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="rect">The shape of the rectangle in local space</param>
		[MethodImpl( INLINE )] public static void Rectangle( Rect rect ) => Rectangle_Internal( BlendMode, false, rect, Color, Thickness, default );
		/// <summary>Draws a rectangle with a given size</summary><param name="rect">The shape of the rectangle in local space</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void Rectangle( Rect rect, Color color ) => Rectangle_Internal( BlendMode, false, rect, color, Thickness, default );
		/// <summary>Draws a rectangle with a given size</summary><param name="rect">The shape of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param>
		[MethodImpl( INLINE )] public static void Rectangle( Rect rect, float cornerRadius ) => Rectangle_Internal( BlendMode, false, rect, Color, Thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
		/// <summary>Draws a rectangle with a given size</summary><param name="rect">The shape of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void Rectangle( Rect rect, float cornerRadius, Color color ) => Rectangle_Internal( BlendMode, false, rect, color, Thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
		/// <summary>Draws a rectangle with a given size</summary><param name="rect">The shape of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		[MethodImpl( INLINE )] public static void Rectangle( Rect rect, Vector4 cornerRadii ) => Rectangle_Internal( BlendMode, false, rect, Color, Thickness, cornerRadii );
		/// <summary>Draws a rectangle with a given size</summary><param name="rect">The shape of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void Rectangle( Rect rect, Vector4 cornerRadii, Color color ) => Rectangle_Internal( BlendMode, false, rect, color, Thickness, cornerRadii );
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Vector2 size, RectPivot pivot ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( size ), Color, Thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Vector2 size, RectPivot pivot, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( size ), color, Thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadius">The radius of rounded corners</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Vector2 size, RectPivot pivot, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( size ), Color, Thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Vector2 size, RectPivot pivot, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( size ), color, Thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Vector2 size, RectPivot pivot, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( size ), Color, Thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Vector2 size, RectPivot pivot, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( size ), color, Thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, float width, float height, RectPivot pivot ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( width, height ), Color, Thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, float width, float height, RectPivot pivot, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( width, height ), color, Thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadius">The radius of rounded corners</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, float width, float height, RectPivot pivot, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( width, height ), Color, Thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, float width, float height, RectPivot pivot, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( width, height ), color, Thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, float width, float height, RectPivot pivot, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( width, height ), Color, Thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, float width, float height, RectPivot pivot, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( width, height ), color, Thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Vector3 normal, Vector2 size, RectPivot pivot ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( size ), Color, Thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Vector3 normal, Vector2 size, RectPivot pivot, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( size ), color, Thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadius">The radius of rounded corners</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Vector3 normal, Vector2 size, RectPivot pivot, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( size ), Color, Thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Vector3 normal, Vector2 size, RectPivot pivot, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( size ), color, Thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Vector3 normal, Vector2 size, RectPivot pivot, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( size ), Color, Thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Vector3 normal, Vector2 size, RectPivot pivot, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( size ), color, Thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Vector3 normal, float width, float height, RectPivot pivot ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( width, height ), Color, Thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Vector3 normal, float width, float height, RectPivot pivot, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( width, height ), color, Thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadius">The radius of rounded corners</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Vector3 normal, float width, float height, RectPivot pivot, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( width, height ), Color, Thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Vector3 normal, float width, float height, RectPivot pivot, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( width, height ), color, Thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Vector3 normal, float width, float height, RectPivot pivot, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( width, height ), Color, Thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Vector3 normal, float width, float height, RectPivot pivot, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( width, height ), color, Thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Quaternion rot, Vector2 size, RectPivot pivot ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( size ), Color, Thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Quaternion rot, Vector2 size, RectPivot pivot, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( size ), color, Thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadius">The radius of rounded corners</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Quaternion rot, Vector2 size, RectPivot pivot, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( size ), Color, Thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Quaternion rot, Vector2 size, RectPivot pivot, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( size ), color, Thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Quaternion rot, Vector2 size, RectPivot pivot, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( size ), Color, Thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Quaternion rot, Vector2 size, RectPivot pivot, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( size ), color, Thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Quaternion rot, float width, float height, RectPivot pivot ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( width, height ), Color, Thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Quaternion rot, float width, float height, RectPivot pivot, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( width, height ), color, Thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadius">The radius of rounded corners</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Quaternion rot, float width, float height, RectPivot pivot, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( width, height ), Color, Thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Quaternion rot, float width, float height, RectPivot pivot, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( width, height ), color, Thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Quaternion rot, float width, float height, RectPivot pivot, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( width, height ), Color, Thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void Rectangle( Vector3 pos, Quaternion rot, float width, float height, RectPivot pivot, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( width, height ), color, Thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Rect rect, float thickness ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, rect, Color, thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Rect rect, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, rect, color, thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Rect rect, float thickness, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, rect, Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Rect rect, float thickness, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, rect, color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Rect rect, float thickness, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, rect, Color, thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Rect rect, float thickness, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, rect, color, thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Vector3 normal, Rect rect, float thickness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, rect, Color, thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Vector3 normal, Rect rect, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, rect, color, thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Vector3 normal, Rect rect, float thickness, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, rect, Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Vector3 normal, Rect rect, float thickness, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, rect, color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Vector3 normal, Rect rect, float thickness, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, rect, Color, thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Vector3 normal, Rect rect, float thickness, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, rect, color, thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Quaternion rot, Rect rect, float thickness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, rect, Color, thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Quaternion rot, Rect rect, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, rect, color, thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Quaternion rot, Rect rect, float thickness, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, rect, Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Quaternion rot, Rect rect, float thickness, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, rect, color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Quaternion rot, Rect rect, float thickness, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, rect, Color, thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Quaternion rot, Rect rect, float thickness, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, rect, color, thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Vector2 size, float thickness ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( size ), Color, thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Vector2 size, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( size ), color, thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Vector2 size, float thickness, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( size ), Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Vector2 size, float thickness, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( size ), color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Vector2 size, float thickness, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( size ), Color, thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Vector2 size, float thickness, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( size ), color, thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, float width, float height, float thickness ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( width, height ), Color, thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, float width, float height, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( width, height ), color, thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, float width, float height, float thickness, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( width, height ), Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, float width, float height, float thickness, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( width, height ), color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, float width, float height, float thickness, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( width, height ), Color, thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, float width, float height, float thickness, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( width, height ), color, thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Vector3 normal, Vector2 size, float thickness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( size ), Color, thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Vector3 normal, Vector2 size, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( size ), color, thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Vector3 normal, Vector2 size, float thickness, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( size ), Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Vector3 normal, Vector2 size, float thickness, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( size ), color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Vector3 normal, Vector2 size, float thickness, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( size ), Color, thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Vector3 normal, Vector2 size, float thickness, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( size ), color, thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Vector3 normal, float width, float height, float thickness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( width, height ), Color, thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Vector3 normal, float width, float height, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( width, height ), color, thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Vector3 normal, float width, float height, float thickness, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( width, height ), Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Vector3 normal, float width, float height, float thickness, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( width, height ), color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Vector3 normal, float width, float height, float thickness, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( width, height ), Color, thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Vector3 normal, float width, float height, float thickness, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( width, height ), color, thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Quaternion rot, Vector2 size, float thickness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( size ), Color, thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Quaternion rot, Vector2 size, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( size ), color, thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Quaternion rot, Vector2 size, float thickness, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( size ), Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Quaternion rot, Vector2 size, float thickness, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( size ), color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Quaternion rot, Vector2 size, float thickness, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( size ), Color, thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Quaternion rot, Vector2 size, float thickness, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( size ), color, thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Quaternion rot, float width, float height, float thickness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( width, height ), Color, thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Quaternion rot, float width, float height, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( width, height ), color, thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Quaternion rot, float width, float height, float thickness, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( width, height ), Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Quaternion rot, float width, float height, float thickness, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( width, height ), color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Quaternion rot, float width, float height, float thickness, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( width, height ), Color, thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Quaternion rot, float width, float height, float thickness, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( width, height ), color, thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Rect rect, float thickness ) => Rectangle_Internal( BlendMode, true, rect, Color, thickness, default );
		/// <summary>Draws a rectangle with a given size</summary><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Rect rect, float thickness, Color color ) => Rectangle_Internal( BlendMode, true, rect, color, thickness, default );
		/// <summary>Draws a rectangle with a given size</summary><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Rect rect, float thickness, float cornerRadius ) => Rectangle_Internal( BlendMode, true, rect, Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
		/// <summary>Draws a rectangle with a given size</summary><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Rect rect, float thickness, float cornerRadius, Color color ) => Rectangle_Internal( BlendMode, true, rect, color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
		/// <summary>Draws a rectangle with a given size</summary><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Rect rect, float thickness, Vector4 cornerRadii ) => Rectangle_Internal( BlendMode, true, rect, Color, thickness, cornerRadii );
		/// <summary>Draws a rectangle with a given size</summary><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Rect rect, float thickness, Vector4 cornerRadii, Color color ) => Rectangle_Internal( BlendMode, true, rect, color, thickness, cornerRadii );
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Vector2 size, RectPivot pivot, float thickness ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( size ), Color, thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Vector2 size, RectPivot pivot, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( size ), color, thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Vector2 size, RectPivot pivot, float thickness, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( size ), Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Vector2 size, RectPivot pivot, float thickness, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( size ), color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Vector2 size, RectPivot pivot, float thickness, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( size ), Color, thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Vector2 size, RectPivot pivot, float thickness, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( size ), color, thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, float width, float height, RectPivot pivot, float thickness ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( width, height ), Color, thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, float width, float height, RectPivot pivot, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( width, height ), color, thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, float width, float height, RectPivot pivot, float thickness, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( width, height ), Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, float width, float height, RectPivot pivot, float thickness, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( width, height ), color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, float width, float height, RectPivot pivot, float thickness, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( width, height ), Color, thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, float width, float height, RectPivot pivot, float thickness, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( width, height ), color, thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Vector3 normal, Vector2 size, RectPivot pivot, float thickness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( size ), Color, thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Vector3 normal, Vector2 size, RectPivot pivot, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( size ), color, thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Vector3 normal, Vector2 size, RectPivot pivot, float thickness, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( size ), Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Vector3 normal, Vector2 size, RectPivot pivot, float thickness, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( size ), color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Vector3 normal, Vector2 size, RectPivot pivot, float thickness, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( size ), Color, thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Vector3 normal, Vector2 size, RectPivot pivot, float thickness, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( size ), color, thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Vector3 normal, float width, float height, RectPivot pivot, float thickness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( width, height ), Color, thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Vector3 normal, float width, float height, RectPivot pivot, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( width, height ), color, thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Vector3 normal, float width, float height, RectPivot pivot, float thickness, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( width, height ), Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Vector3 normal, float width, float height, RectPivot pivot, float thickness, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( width, height ), color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Vector3 normal, float width, float height, RectPivot pivot, float thickness, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( width, height ), Color, thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Vector3 normal, float width, float height, RectPivot pivot, float thickness, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( width, height ), color, thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Quaternion rot, Vector2 size, RectPivot pivot, float thickness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( size ), Color, thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Quaternion rot, Vector2 size, RectPivot pivot, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( size ), color, thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Quaternion rot, Vector2 size, RectPivot pivot, float thickness, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( size ), Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Quaternion rot, Vector2 size, RectPivot pivot, float thickness, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( size ), color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Quaternion rot, Vector2 size, RectPivot pivot, float thickness, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( size ), Color, thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Quaternion rot, Vector2 size, RectPivot pivot, float thickness, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( size ), color, thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Quaternion rot, float width, float height, RectPivot pivot, float thickness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( width, height ), Color, thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Quaternion rot, float width, float height, RectPivot pivot, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( width, height ), color, thickness, default );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Quaternion rot, float width, float height, RectPivot pivot, float thickness, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( width, height ), Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Quaternion rot, float width, float height, RectPivot pivot, float thickness, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( width, height ), color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Quaternion rot, float width, float height, RectPivot pivot, float thickness, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( width, height ), Color, thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		[MethodImpl( INLINE )] public static void RectangleBorder( Vector3 pos, Quaternion rot, float width, float height, RectPivot pivot, float thickness, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( width, height ), color, thickness, cornerRadii );
			Draw.PopMatrix();
		}
		/// <summary>Draws a triangle with arbitrary vertex positions and colors</summary><param name="a">The position of the first point</param><param name="b">The position of the second point</param><param name="c">The position of the third point</param>
		[MethodImpl( INLINE )] public static void Triangle( Vector3 a, Vector3 b, Vector3 c ) => Triangle_Internal( a, b, c, false, Thickness, 0f, Color, Color, Color );
		/// <summary>Draws a triangle with arbitrary vertex positions and colors</summary><param name="a">The position of the first point</param><param name="b">The position of the second point</param><param name="c">The position of the third point</param><param name="color">The color of the triangle</param>
		[MethodImpl( INLINE )] public static void Triangle( Vector3 a, Vector3 b, Vector3 c, Color color ) => Triangle_Internal( a, b, c, false, Thickness, 0f, color, color, color );
		/// <summary>Draws a triangle with arbitrary vertex positions and colors</summary><param name="a">The position of the first point</param><param name="b">The position of the second point</param><param name="c">The position of the third point</param><param name="colorA">The color of the first point</param><param name="colorB">The color of the second point</param><param name="colorC">The color of the third point</param>
		[MethodImpl( INLINE )] public static void Triangle( Vector3 a, Vector3 b, Vector3 c, Color colorA, Color colorB, Color colorC ) => Triangle_Internal( a, b, c, false, Thickness, 0f, colorA, colorB, colorC );
		/// <summary>Draws a triangle with arbitrary vertex positions and colors</summary><param name="a">The position of the first point</param><param name="b">The position of the second point</param><param name="c">The position of the third point</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param>
		[MethodImpl( INLINE )] public static void Triangle( Vector3 a, Vector3 b, Vector3 c, float roundness ) => Triangle_Internal( a, b, c, false, Thickness, roundness, Color, Color, Color );
		/// <summary>Draws a triangle with arbitrary vertex positions and colors</summary><param name="a">The position of the first point</param><param name="b">The position of the second point</param><param name="c">The position of the third point</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="color">The color of the triangle</param>
		[MethodImpl( INLINE )] public static void Triangle( Vector3 a, Vector3 b, Vector3 c, float roundness, Color color ) => Triangle_Internal( a, b, c, false, Thickness, roundness, color, color, color );
		/// <summary>Draws a triangle with arbitrary vertex positions and colors</summary><param name="a">The position of the first point</param><param name="b">The position of the second point</param><param name="c">The position of the third point</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="colorA">The color of the first point</param><param name="colorB">The color of the second point</param><param name="colorC">The color of the third point</param>
		[MethodImpl( INLINE )] public static void Triangle( Vector3 a, Vector3 b, Vector3 c, float roundness, Color colorA, Color colorB, Color colorC ) => Triangle_Internal( a, b, c, false, Thickness, roundness, colorA, colorB, colorC );
		/// <summary>Draws a triangle with arbitrary vertex positions and colors</summary><param name="a">The position of the first point</param><param name="b">The position of the second point</param><param name="c">The position of the third point</param>
		[MethodImpl( INLINE )] public static void TriangleBorder( Vector3 a, Vector3 b, Vector3 c ) => Triangle_Internal( a, b, c, true, Thickness, 0f, Color, Color, Color );
		/// <summary>Draws a triangle with arbitrary vertex positions and colors</summary><param name="a">The position of the first point</param><param name="b">The position of the second point</param><param name="c">The position of the third point</param><param name="color">The color of the triangle</param>
		[MethodImpl( INLINE )] public static void TriangleBorder( Vector3 a, Vector3 b, Vector3 c, Color color ) => Triangle_Internal( a, b, c, true, Thickness, 0f, color, color, color );
		/// <summary>Draws a triangle with arbitrary vertex positions and colors</summary><param name="a">The position of the first point</param><param name="b">The position of the second point</param><param name="c">The position of the third point</param><param name="colorA">The color of the first point</param><param name="colorB">The color of the second point</param><param name="colorC">The color of the third point</param>
		[MethodImpl( INLINE )] public static void TriangleBorder( Vector3 a, Vector3 b, Vector3 c, Color colorA, Color colorB, Color colorC ) => Triangle_Internal( a, b, c, true, Thickness, 0f, colorA, colorB, colorC );
		/// <summary>Draws a triangle with arbitrary vertex positions and colors</summary><param name="a">The position of the first point</param><param name="b">The position of the second point</param><param name="c">The position of the third point</param><param name="thickness">The thickness of the border</param>
		[MethodImpl( INLINE )] public static void TriangleBorder( Vector3 a, Vector3 b, Vector3 c, float thickness ) => Triangle_Internal( a, b, c, true, thickness, 0f, Color, Color, Color );
		/// <summary>Draws a triangle with arbitrary vertex positions and colors</summary><param name="a">The position of the first point</param><param name="b">The position of the second point</param><param name="c">The position of the third point</param><param name="thickness">The thickness of the border</param><param name="color">The color of the triangle</param>
		[MethodImpl( INLINE )] public static void TriangleBorder( Vector3 a, Vector3 b, Vector3 c, float thickness, Color color ) => Triangle_Internal( a, b, c, true, thickness, 0f, color, color, color );
		/// <summary>Draws a triangle with arbitrary vertex positions and colors</summary><param name="a">The position of the first point</param><param name="b">The position of the second point</param><param name="c">The position of the third point</param><param name="thickness">The thickness of the border</param><param name="colorA">The color of the first point</param><param name="colorB">The color of the second point</param><param name="colorC">The color of the third point</param>
		[MethodImpl( INLINE )] public static void TriangleBorder( Vector3 a, Vector3 b, Vector3 c, float thickness, Color colorA, Color colorB, Color colorC ) => Triangle_Internal( a, b, c, true, thickness, 0f, colorA, colorB, colorC );
		/// <summary>Draws a triangle with arbitrary vertex positions and colors</summary><param name="a">The position of the first point</param><param name="b">The position of the second point</param><param name="c">The position of the third point</param><param name="thickness">The thickness of the border</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param>
		[MethodImpl( INLINE )] public static void TriangleBorder( Vector3 a, Vector3 b, Vector3 c, float thickness, float roundness ) => Triangle_Internal( a, b, c, true, thickness, roundness, Color, Color, Color );
		/// <summary>Draws a triangle with arbitrary vertex positions and colors</summary><param name="a">The position of the first point</param><param name="b">The position of the second point</param><param name="c">The position of the third point</param><param name="thickness">The thickness of the border</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="color">The color of the triangle</param>
		[MethodImpl( INLINE )] public static void TriangleBorder( Vector3 a, Vector3 b, Vector3 c, float thickness, float roundness, Color color ) => Triangle_Internal( a, b, c, true, thickness, roundness, color, color, color );
		/// <summary>Draws a triangle with arbitrary vertex positions and colors</summary><param name="a">The position of the first point</param><param name="b">The position of the second point</param><param name="c">The position of the third point</param><param name="thickness">The thickness of the border</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="colorA">The color of the first point</param><param name="colorB">The color of the second point</param><param name="colorC">The color of the third point</param>
		[MethodImpl( INLINE )] public static void TriangleBorder( Vector3 a, Vector3 b, Vector3 c, float thickness, float roundness, Color colorA, Color colorB, Color colorC ) => Triangle_Internal( a, b, c, true, thickness, roundness, colorA, colorB, colorC );
		/// <summary>Draws a quad with arbitrary vertex positions and colors</summary><param name="a">The position of the first point</param><param name="b">The position of the second point</param><param name="c">The position of the third point</param>
		[MethodImpl( INLINE )] public static void Quad( Vector3 a, Vector3 b, Vector3 c ) => Quad_Internal( a, b, c, a + ( c - b ), Color, Color, Color, Color );
		/// <summary>Draws a quad with arbitrary vertex positions and colors</summary><param name="a">The position of the first point</param><param name="b">The position of the second point</param><param name="c">The position of the third point</param><param name="color">The color of the quad</param>
		[MethodImpl( INLINE )] public static void Quad( Vector3 a, Vector3 b, Vector3 c, Color color ) => Quad_Internal( a, b, c, a + ( c - b ), color, color, color, color );
		/// <summary>Draws a quad with arbitrary vertex positions and colors</summary><param name="a">The position of the first point</param><param name="b">The position of the second point</param><param name="c">The position of the third point</param><param name="colorA">The color of the first point</param><param name="colorB">The color of the second point</param><param name="colorC">The color of the third point</param><param name="colorD">The color of the fourth point</param>
		[MethodImpl( INLINE )] public static void Quad( Vector3 a, Vector3 b, Vector3 c, Color colorA, Color colorB, Color colorC, Color colorD ) => Quad_Internal( a, b, c, a + ( c - b ), colorA, colorB, colorC, colorD );
		/// <summary>Draws a quad with arbitrary vertex positions and colors</summary><param name="a">The position of the first point</param><param name="b">The position of the second point</param><param name="c">The position of the third point</param><param name="d">The position of the fourth point</param>
		[MethodImpl( INLINE )] public static void Quad( Vector3 a, Vector3 b, Vector3 c, Vector3 d ) => Quad_Internal( a, b, c, d, Color, Color, Color, Color );
		/// <summary>Draws a quad with arbitrary vertex positions and colors</summary><param name="a">The position of the first point</param><param name="b">The position of the second point</param><param name="c">The position of the third point</param><param name="d">The position of the fourth point</param><param name="color">The color of the quad</param>
		[MethodImpl( INLINE )] public static void Quad( Vector3 a, Vector3 b, Vector3 c, Vector3 d, Color color ) => Quad_Internal( a, b, c, d, color, color, color, color );
		/// <summary>Draws a quad with arbitrary vertex positions and colors</summary><param name="a">The position of the first point</param><param name="b">The position of the second point</param><param name="c">The position of the third point</param><param name="d">The position of the fourth point</param><param name="colorA">The color of the first point</param><param name="colorB">The color of the second point</param><param name="colorC">The color of the third point</param><param name="colorD">The color of the fourth point</param>
		[MethodImpl( INLINE )] public static void Quad( Vector3 a, Vector3 b, Vector3 c, Vector3 d, Color colorA, Color colorB, Color colorC, Color colorD ) => Quad_Internal( a, b, c, d, colorA, colorB, colorC, colorD );
		/// <summary>Draws a 3D sphere with a given radius</summary><param name="pos">The position of the sphere</param>
		[MethodImpl( INLINE )] public static void Sphere( Vector3 pos ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Sphere_Internal( Radius, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D sphere with a given radius</summary><param name="pos">The position of the sphere</param><param name="radius">The radius of this sphere</param>
		[MethodImpl( INLINE )] public static void Sphere( Vector3 pos, float radius ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Sphere_Internal( radius, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D sphere with a given radius</summary><param name="pos">The position of the sphere</param><param name="color">The color of the sphere</param>
		[MethodImpl( INLINE )] public static void Sphere( Vector3 pos, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Sphere_Internal( Radius, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D sphere with a given radius</summary><param name="pos">The position of the sphere</param><param name="radius">The radius of this sphere</param><param name="color">The color of the sphere</param>
		[MethodImpl( INLINE )] public static void Sphere( Vector3 pos, float radius, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Sphere_Internal( radius, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D sphere with a given radius</summary>
		[MethodImpl( INLINE )] public static void Sphere() => Sphere_Internal( Radius, Color );
		/// <summary>Draws a 3D sphere with a given radius</summary><param name="radius">The radius of this sphere</param>
		[MethodImpl( INLINE )] public static void Sphere( float radius ) => Sphere_Internal( radius, Color );
		/// <summary>Draws a 3D sphere with a given radius</summary><param name="color">The color of the sphere</param>
		[MethodImpl( INLINE )] public static void Sphere( Color color ) => Sphere_Internal( Radius, color );
		/// <summary>Draws a 3D sphere with a given radius</summary><param name="radius">The radius of this sphere</param><param name="color">The color of the sphere</param>
		[MethodImpl( INLINE )] public static void Sphere( float radius, Color color ) => Sphere_Internal( radius, color );
		/// <summary>Draws a 3D cuboid with a given size</summary><param name="pos">The position of the cuboid</param><param name="size"></param>
		[MethodImpl( INLINE )] public static void Cuboid( Vector3 pos, Vector3 size ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Cuboid_Internal( size, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D cuboid with a given size</summary><param name="pos">The position of the cuboid</param><param name="size"></param><param name="color">The color of the cuboid</param>
		[MethodImpl( INLINE )] public static void Cuboid( Vector3 pos, Vector3 size, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Cuboid_Internal( size, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D cuboid with a given size</summary><param name="pos">The position of the cuboid</param><param name="normal">The normal direction of the cuboid</param><param name="size"></param>
		[MethodImpl( INLINE )] public static void Cuboid( Vector3 pos, Vector3 normal, Vector3 size ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Cuboid_Internal( size, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D cuboid with a given size</summary><param name="pos">The position of the cuboid</param><param name="normal">The normal direction of the cuboid</param><param name="size"></param><param name="color">The color of the cuboid</param>
		[MethodImpl( INLINE )] public static void Cuboid( Vector3 pos, Vector3 normal, Vector3 size, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Cuboid_Internal( size, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D cuboid with a given size</summary><param name="pos">The position of the cuboid</param><param name="rot">The orientation of the cuboid</param><param name="size"></param>
		[MethodImpl( INLINE )] public static void Cuboid( Vector3 pos, Quaternion rot, Vector3 size ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Cuboid_Internal( size, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D cuboid with a given size</summary><param name="pos">The position of the cuboid</param><param name="rot">The orientation of the cuboid</param><param name="size"></param><param name="color">The color of the cuboid</param>
		[MethodImpl( INLINE )] public static void Cuboid( Vector3 pos, Quaternion rot, Vector3 size, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Cuboid_Internal( size, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D cuboid with a given size</summary><param name="size"></param>
		[MethodImpl( INLINE )] public static void Cuboid( Vector3 size ) => Cuboid_Internal( size, Color );
		/// <summary>Draws a 3D cuboid with a given size</summary><param name="size"></param><param name="color">The color of the cuboid</param>
		[MethodImpl( INLINE )] public static void Cuboid( Vector3 size, Color color ) => Cuboid_Internal( size, color );
		/// <summary>Draws a 3D cube with a given size</summary><param name="pos">The position of the cube</param><param name="size"></param>
		[MethodImpl( INLINE )] public static void Cube( Vector3 pos, float size ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Cuboid_Internal( new Vector3( size, size, size ), Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D cube with a given size</summary><param name="pos">The position of the cube</param><param name="size"></param><param name="color">The color of the cube</param>
		[MethodImpl( INLINE )] public static void Cube( Vector3 pos, float size, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Cuboid_Internal( new Vector3( size, size, size ), color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D cube with a given size</summary><param name="pos">The position of the cube</param><param name="normal">The normal direction of the cube</param><param name="size"></param>
		[MethodImpl( INLINE )] public static void Cube( Vector3 pos, Vector3 normal, float size ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Cuboid_Internal( new Vector3( size, size, size ), Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D cube with a given size</summary><param name="pos">The position of the cube</param><param name="normal">The normal direction of the cube</param><param name="size"></param><param name="color">The color of the cube</param>
		[MethodImpl( INLINE )] public static void Cube( Vector3 pos, Vector3 normal, float size, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Cuboid_Internal( new Vector3( size, size, size ), color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D cube with a given size</summary><param name="pos">The position of the cube</param><param name="rot">The orientation of the cube</param><param name="size"></param>
		[MethodImpl( INLINE )] public static void Cube( Vector3 pos, Quaternion rot, float size ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Cuboid_Internal( new Vector3( size, size, size ), Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D cube with a given size</summary><param name="pos">The position of the cube</param><param name="rot">The orientation of the cube</param><param name="size"></param><param name="color">The color of the cube</param>
		[MethodImpl( INLINE )] public static void Cube( Vector3 pos, Quaternion rot, float size, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Cuboid_Internal( new Vector3( size, size, size ), color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D cube with a given size</summary><param name="size"></param>
		[MethodImpl( INLINE )] public static void Cube( float size ) => Cuboid_Internal( new Vector3( size, size, size ), Color );
		/// <summary>Draws a 3D cube with a given size</summary><param name="size"></param><param name="color">The color of the cube</param>
		[MethodImpl( INLINE )] public static void Cube( float size, Color color ) => Cuboid_Internal( new Vector3( size, size, size ), color );
		/// <summary>Draws a 3D cone with a given radius and length</summary><param name="pos">The position of the cone</param><param name="radius">The radius of the base of the cone</param><param name="length">The length/height of the cone</param>
		[MethodImpl( INLINE )] public static void Cone( Vector3 pos, float radius, float length ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Cone_Internal( radius, length, true, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D cone with a given radius and length</summary><param name="pos">The position of the cone</param><param name="radius">The radius of the base of the cone</param><param name="length">The length/height of the cone</param><param name="fillCap">Whether or not the base cap should be filled or hollow</param>
		[MethodImpl( INLINE )] public static void Cone( Vector3 pos, float radius, float length, bool fillCap ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Cone_Internal( radius, length, fillCap, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D cone with a given radius and length</summary><param name="pos">The position of the cone</param><param name="radius">The radius of the base of the cone</param><param name="length">The length/height of the cone</param><param name="color">The color of the cone</param>
		[MethodImpl( INLINE )] public static void Cone( Vector3 pos, float radius, float length, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Cone_Internal( radius, length, true, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D cone with a given radius and length</summary><param name="pos">The position of the cone</param><param name="radius">The radius of the base of the cone</param><param name="length">The length/height of the cone</param><param name="fillCap">Whether or not the base cap should be filled or hollow</param><param name="color">The color of the cone</param>
		[MethodImpl( INLINE )] public static void Cone( Vector3 pos, float radius, float length, bool fillCap, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Cone_Internal( radius, length, fillCap, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D cone with a given radius and length</summary><param name="pos">The position of the cone</param><param name="normal">The normal direction of the cone</param><param name="radius">The radius of the base of the cone</param><param name="length">The length/height of the cone</param>
		[MethodImpl( INLINE )] public static void Cone( Vector3 pos, Vector3 normal, float radius, float length ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Cone_Internal( radius, length, true, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D cone with a given radius and length</summary><param name="pos">The position of the cone</param><param name="normal">The normal direction of the cone</param><param name="radius">The radius of the base of the cone</param><param name="length">The length/height of the cone</param><param name="fillCap">Whether or not the base cap should be filled or hollow</param>
		[MethodImpl( INLINE )] public static void Cone( Vector3 pos, Vector3 normal, float radius, float length, bool fillCap ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Cone_Internal( radius, length, fillCap, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D cone with a given radius and length</summary><param name="pos">The position of the cone</param><param name="normal">The normal direction of the cone</param><param name="radius">The radius of the base of the cone</param><param name="length">The length/height of the cone</param><param name="color">The color of the cone</param>
		[MethodImpl( INLINE )] public static void Cone( Vector3 pos, Vector3 normal, float radius, float length, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Cone_Internal( radius, length, true, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D cone with a given radius and length</summary><param name="pos">The position of the cone</param><param name="normal">The normal direction of the cone</param><param name="radius">The radius of the base of the cone</param><param name="length">The length/height of the cone</param><param name="fillCap">Whether or not the base cap should be filled or hollow</param><param name="color">The color of the cone</param>
		[MethodImpl( INLINE )] public static void Cone( Vector3 pos, Vector3 normal, float radius, float length, bool fillCap, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Cone_Internal( radius, length, fillCap, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D cone with a given radius and length</summary><param name="pos">The position of the cone</param><param name="rot">The orientation of the cone</param><param name="radius">The radius of the base of the cone</param><param name="length">The length/height of the cone</param>
		[MethodImpl( INLINE )] public static void Cone( Vector3 pos, Quaternion rot, float radius, float length ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Cone_Internal( radius, length, true, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D cone with a given radius and length</summary><param name="pos">The position of the cone</param><param name="rot">The orientation of the cone</param><param name="radius">The radius of the base of the cone</param><param name="length">The length/height of the cone</param><param name="fillCap">Whether or not the base cap should be filled or hollow</param>
		[MethodImpl( INLINE )] public static void Cone( Vector3 pos, Quaternion rot, float radius, float length, bool fillCap ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Cone_Internal( radius, length, fillCap, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D cone with a given radius and length</summary><param name="pos">The position of the cone</param><param name="rot">The orientation of the cone</param><param name="radius">The radius of the base of the cone</param><param name="length">The length/height of the cone</param><param name="color">The color of the cone</param>
		[MethodImpl( INLINE )] public static void Cone( Vector3 pos, Quaternion rot, float radius, float length, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Cone_Internal( radius, length, true, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D cone with a given radius and length</summary><param name="pos">The position of the cone</param><param name="rot">The orientation of the cone</param><param name="radius">The radius of the base of the cone</param><param name="length">The length/height of the cone</param><param name="fillCap">Whether or not the base cap should be filled or hollow</param><param name="color">The color of the cone</param>
		[MethodImpl( INLINE )] public static void Cone( Vector3 pos, Quaternion rot, float radius, float length, bool fillCap, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Cone_Internal( radius, length, fillCap, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D cone with a given radius and length</summary><param name="radius">The radius of the base of the cone</param><param name="length">The length/height of the cone</param>
		[MethodImpl( INLINE )] public static void Cone( float radius, float length ) => Cone_Internal( radius, length, true, Color );
		/// <summary>Draws a 3D cone with a given radius and length</summary><param name="radius">The radius of the base of the cone</param><param name="length">The length/height of the cone</param><param name="fillCap">Whether or not the base cap should be filled or hollow</param>
		[MethodImpl( INLINE )] public static void Cone( float radius, float length, bool fillCap ) => Cone_Internal( radius, length, fillCap, Color );
		/// <summary>Draws a 3D cone with a given radius and length</summary><param name="radius">The radius of the base of the cone</param><param name="length">The length/height of the cone</param><param name="color">The color of the cone</param>
		[MethodImpl( INLINE )] public static void Cone( float radius, float length, Color color ) => Cone_Internal( radius, length, true, color );
		/// <summary>Draws a 3D cone with a given radius and length</summary><param name="radius">The radius of the base of the cone</param><param name="length">The length/height of the cone</param><param name="fillCap">Whether or not the base cap should be filled or hollow</param><param name="color">The color of the cone</param>
		[MethodImpl( INLINE )] public static void Cone( float radius, float length, bool fillCap, Color color ) => Cone_Internal( radius, length, fillCap, color );
		/// <summary>Draws a 3D torus with a given radius and thickness</summary><param name="pos">The position of the torus</param><param name="radius">The radius of this torus</param><param name="thickness">The thickness of the torus</param>
		[MethodImpl( INLINE )] public static void Torus( Vector3 pos, float radius, float thickness ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Torus_Internal( radius, thickness, 0, ShapesMath.TAU, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D torus with a given radius and thickness</summary><param name="pos">The position of the torus</param><param name="radius">The radius of this torus</param><param name="thickness">The thickness of the torus</param><param name="color">The color of the torus</param>
		[MethodImpl( INLINE )] public static void Torus( Vector3 pos, float radius, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Torus_Internal( radius, thickness, 0, ShapesMath.TAU, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D torus with a given radius and thickness</summary><param name="pos">The position of the torus</param><param name="normal">The normal direction of the torus</param><param name="radius">The radius of this torus</param><param name="thickness">The thickness of the torus</param>
		[MethodImpl( INLINE )] public static void Torus( Vector3 pos, Vector3 normal, float radius, float thickness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Torus_Internal( radius, thickness, 0, ShapesMath.TAU, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D torus with a given radius and thickness</summary><param name="pos">The position of the torus</param><param name="normal">The normal direction of the torus</param><param name="radius">The radius of this torus</param><param name="thickness">The thickness of the torus</param><param name="color">The color of the torus</param>
		[MethodImpl( INLINE )] public static void Torus( Vector3 pos, Vector3 normal, float radius, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Torus_Internal( radius, thickness, 0, ShapesMath.TAU, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D torus with a given radius and thickness</summary><param name="pos">The position of the torus</param><param name="rot">The orientation of the torus</param><param name="radius">The radius of this torus</param><param name="thickness">The thickness of the torus</param>
		[MethodImpl( INLINE )] public static void Torus( Vector3 pos, Quaternion rot, float radius, float thickness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Torus_Internal( radius, thickness, 0, ShapesMath.TAU, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D torus with a given radius and thickness</summary><param name="pos">The position of the torus</param><param name="rot">The orientation of the torus</param><param name="radius">The radius of this torus</param><param name="thickness">The thickness of the torus</param><param name="color">The color of the torus</param>
		[MethodImpl( INLINE )] public static void Torus( Vector3 pos, Quaternion rot, float radius, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Torus_Internal( radius, thickness, 0, ShapesMath.TAU, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D torus with a given radius and thickness</summary><param name="radius">The radius of this torus</param><param name="thickness">The thickness of the torus</param>
		[MethodImpl( INLINE )] public static void Torus( float radius, float thickness ) => Torus_Internal( radius, thickness, 0, ShapesMath.TAU, Color );
		/// <summary>Draws a 3D torus with a given radius and thickness</summary><param name="radius">The radius of this torus</param><param name="thickness">The thickness of the torus</param><param name="color">The color of the torus</param>
		[MethodImpl( INLINE )] public static void Torus( float radius, float thickness, Color color ) => Torus_Internal( radius, thickness, 0, ShapesMath.TAU, color );
		/// <summary>Draws a 3D torus with a given radius and thickness</summary><param name="pos">The position of the torus</param><param name="radius">The radius of this torus</param><param name="thickness">The thickness of the torus</param><param name="angleRadStart">The start angle of the torus, in radians</param><param name="angleRadEnd">The end angle of the torus, in radians</param>
		[MethodImpl( INLINE )] public static void Torus( Vector3 pos, float radius, float thickness, float angleRadStart, float angleRadEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Torus_Internal( radius, thickness, angleRadStart, angleRadEnd, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D torus with a given radius and thickness</summary><param name="pos">The position of the torus</param><param name="radius">The radius of this torus</param><param name="thickness">The thickness of the torus</param><param name="angleRadStart">The start angle of the torus, in radians</param><param name="angleRadEnd">The end angle of the torus, in radians</param><param name="color">The color of the torus</param>
		[MethodImpl( INLINE )] public static void Torus( Vector3 pos, float radius, float thickness, float angleRadStart, float angleRadEnd, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Torus_Internal( radius, thickness, angleRadStart, angleRadEnd, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D torus with a given radius and thickness</summary><param name="pos">The position of the torus</param><param name="normal">The normal direction of the torus</param><param name="radius">The radius of this torus</param><param name="thickness">The thickness of the torus</param><param name="angleRadStart">The start angle of the torus, in radians</param><param name="angleRadEnd">The end angle of the torus, in radians</param>
		[MethodImpl( INLINE )] public static void Torus( Vector3 pos, Vector3 normal, float radius, float thickness, float angleRadStart, float angleRadEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Torus_Internal( radius, thickness, angleRadStart, angleRadEnd, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D torus with a given radius and thickness</summary><param name="pos">The position of the torus</param><param name="normal">The normal direction of the torus</param><param name="radius">The radius of this torus</param><param name="thickness">The thickness of the torus</param><param name="angleRadStart">The start angle of the torus, in radians</param><param name="angleRadEnd">The end angle of the torus, in radians</param><param name="color">The color of the torus</param>
		[MethodImpl( INLINE )] public static void Torus( Vector3 pos, Vector3 normal, float radius, float thickness, float angleRadStart, float angleRadEnd, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Torus_Internal( radius, thickness, angleRadStart, angleRadEnd, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D torus with a given radius and thickness</summary><param name="pos">The position of the torus</param><param name="rot">The orientation of the torus</param><param name="radius">The radius of this torus</param><param name="thickness">The thickness of the torus</param><param name="angleRadStart">The start angle of the torus, in radians</param><param name="angleRadEnd">The end angle of the torus, in radians</param>
		[MethodImpl( INLINE )] public static void Torus( Vector3 pos, Quaternion rot, float radius, float thickness, float angleRadStart, float angleRadEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Torus_Internal( radius, thickness, angleRadStart, angleRadEnd, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D torus with a given radius and thickness</summary><param name="pos">The position of the torus</param><param name="rot">The orientation of the torus</param><param name="radius">The radius of this torus</param><param name="thickness">The thickness of the torus</param><param name="angleRadStart">The start angle of the torus, in radians</param><param name="angleRadEnd">The end angle of the torus, in radians</param><param name="color">The color of the torus</param>
		[MethodImpl( INLINE )] public static void Torus( Vector3 pos, Quaternion rot, float radius, float thickness, float angleRadStart, float angleRadEnd, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Torus_Internal( radius, thickness, angleRadStart, angleRadEnd, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D torus with a given radius and thickness</summary><param name="radius">The radius of this torus</param><param name="thickness">The thickness of the torus</param><param name="angleRadStart">The start angle of the torus, in radians</param><param name="angleRadEnd">The end angle of the torus, in radians</param>
		[MethodImpl( INLINE )] public static void Torus( float radius, float thickness, float angleRadStart, float angleRadEnd ) => Torus_Internal( radius, thickness, angleRadStart, angleRadEnd, Color );
		/// <summary>Draws a 3D torus with a given radius and thickness</summary><param name="radius">The radius of this torus</param><param name="thickness">The thickness of the torus</param><param name="angleRadStart">The start angle of the torus, in radians</param><param name="angleRadEnd">The end angle of the torus, in radians</param><param name="color">The color of the torus</param>
		[MethodImpl( INLINE )] public static void Torus( float radius, float thickness, float angleRadStart, float angleRadEnd, Color color ) => Torus_Internal( radius, thickness, angleRadStart, angleRadEnd, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the text</param><param name="content">The text to display</param>
		[MethodImpl( INLINE )] public static void Text( TextElement element, Vector3 pos, string content ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( false, content, element, default, default, Font, FontSize, TextAlign, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param>
		[MethodImpl( INLINE )] public static void Text( TextElement element, Vector3 pos, string content, TextAlign align ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( false, content, element, default, default, Font, FontSize, align, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the text</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param>
		[MethodImpl( INLINE )] public static void Text( TextElement element, Vector3 pos, string content, float fontSize ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( false, content, element, default, default, Font, fontSize, TextAlign, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param>
		[MethodImpl( INLINE )] public static void Text( TextElement element, Vector3 pos, string content, TextAlign align, float fontSize ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( false, content, element, default, default, Font, fontSize, align, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the text</param><param name="content">The text to display</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void Text( TextElement element, Vector3 pos, string content, TMP_FontAsset font ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( false, content, element, default, default, font, FontSize, TextAlign, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void Text( TextElement element, Vector3 pos, string content, TextAlign align, TMP_FontAsset font ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( false, content, element, default, default, font, FontSize, align, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the text</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void Text( TextElement element, Vector3 pos, string content, float fontSize, TMP_FontAsset font ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( false, content, element, default, default, font, fontSize, TextAlign, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void Text( TextElement element, Vector3 pos, string content, TextAlign align, float fontSize, TMP_FontAsset font ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( false, content, element, default, default, font, fontSize, align, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the text</param><param name="content">The text to display</param><param name="color">The color of the text</param>
		[MethodImpl( INLINE )] public static void Text( TextElement element, Vector3 pos, string content, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( false, content, element, default, default, Font, FontSize, TextAlign, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="color">The color of the text</param>
		[MethodImpl( INLINE )] public static void Text( TextElement element, Vector3 pos, string content, TextAlign align, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( false, content, element, default, default, Font, FontSize, align, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the text</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="color">The color of the text</param>
		[MethodImpl( INLINE )] public static void Text( TextElement element, Vector3 pos, string content, float fontSize, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( false, content, element, default, default, Font, fontSize, TextAlign, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="color">The color of the text</param>
		[MethodImpl( INLINE )] public static void Text( TextElement element, Vector3 pos, string content, TextAlign align, float fontSize, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( false, content, element, default, default, Font, fontSize, align, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the text</param><param name="content">The text to display</param><param name="font">The font to use</param><param name="color">The color of the text</param>
		[MethodImpl( INLINE )] public static void Text( TextElement element, Vector3 pos, string content, TMP_FontAsset font, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( false, content, element, default, default, font, FontSize, TextAlign, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the text</param>
		[MethodImpl( INLINE )] public static void Text( TextElement element, Vector3 pos, string content, TextAlign align, TMP_FontAsset font, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( false, content, element, default, default, font, FontSize, align, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the text</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the text</param>
		[MethodImpl( INLINE )] public static void Text( TextElement element, Vector3 pos, string content, float fontSize, TMP_FontAsset font, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( false, content, element, default, default, font, fontSize, TextAlign, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the text</param>
		[MethodImpl( INLINE )] public static void Text( TextElement element, Vector3 pos, string content, TextAlign align, float fontSize, TMP_FontAsset font, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( false, content, element, default, default, font, fontSize, align, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the text</param><param name="rot">The orientation of the text</param><param name="content">The text to display</param>
		[MethodImpl( INLINE )] public static void Text( TextElement element, Vector3 pos, Quaternion rot, string content ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( false, content, element, default, default, Font, FontSize, TextAlign, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the text</param><param name="rot">The orientation of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param>
		[MethodImpl( INLINE )] public static void Text( TextElement element, Vector3 pos, Quaternion rot, string content, TextAlign align ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( false, content, element, default, default, Font, FontSize, align, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the text</param><param name="rot">The orientation of the text</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param>
		[MethodImpl( INLINE )] public static void Text( TextElement element, Vector3 pos, Quaternion rot, string content, float fontSize ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( false, content, element, default, default, Font, fontSize, TextAlign, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the text</param><param name="rot">The orientation of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param>
		[MethodImpl( INLINE )] public static void Text( TextElement element, Vector3 pos, Quaternion rot, string content, TextAlign align, float fontSize ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( false, content, element, default, default, Font, fontSize, align, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the text</param><param name="rot">The orientation of the text</param><param name="content">The text to display</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void Text( TextElement element, Vector3 pos, Quaternion rot, string content, TMP_FontAsset font ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( false, content, element, default, default, font, FontSize, TextAlign, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the text</param><param name="rot">The orientation of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void Text( TextElement element, Vector3 pos, Quaternion rot, string content, TextAlign align, TMP_FontAsset font ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( false, content, element, default, default, font, FontSize, align, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the text</param><param name="rot">The orientation of the text</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void Text( TextElement element, Vector3 pos, Quaternion rot, string content, float fontSize, TMP_FontAsset font ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( false, content, element, default, default, font, fontSize, TextAlign, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the text</param><param name="rot">The orientation of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void Text( TextElement element, Vector3 pos, Quaternion rot, string content, TextAlign align, float fontSize, TMP_FontAsset font ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( false, content, element, default, default, font, fontSize, align, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the text</param><param name="rot">The orientation of the text</param><param name="content">The text to display</param><param name="color">The color of the text</param>
		[MethodImpl( INLINE )] public static void Text( TextElement element, Vector3 pos, Quaternion rot, string content, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( false, content, element, default, default, Font, FontSize, TextAlign, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the text</param><param name="rot">The orientation of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="color">The color of the text</param>
		[MethodImpl( INLINE )] public static void Text( TextElement element, Vector3 pos, Quaternion rot, string content, TextAlign align, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( false, content, element, default, default, Font, FontSize, align, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the text</param><param name="rot">The orientation of the text</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="color">The color of the text</param>
		[MethodImpl( INLINE )] public static void Text( TextElement element, Vector3 pos, Quaternion rot, string content, float fontSize, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( false, content, element, default, default, Font, fontSize, TextAlign, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the text</param><param name="rot">The orientation of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="color">The color of the text</param>
		[MethodImpl( INLINE )] public static void Text( TextElement element, Vector3 pos, Quaternion rot, string content, TextAlign align, float fontSize, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( false, content, element, default, default, Font, fontSize, align, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the text</param><param name="rot">The orientation of the text</param><param name="content">The text to display</param><param name="font">The font to use</param><param name="color">The color of the text</param>
		[MethodImpl( INLINE )] public static void Text( TextElement element, Vector3 pos, Quaternion rot, string content, TMP_FontAsset font, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( false, content, element, default, default, font, FontSize, TextAlign, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the text</param><param name="rot">The orientation of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the text</param>
		[MethodImpl( INLINE )] public static void Text( TextElement element, Vector3 pos, Quaternion rot, string content, TextAlign align, TMP_FontAsset font, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( false, content, element, default, default, font, FontSize, align, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the text</param><param name="rot">The orientation of the text</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the text</param>
		[MethodImpl( INLINE )] public static void Text( TextElement element, Vector3 pos, Quaternion rot, string content, float fontSize, TMP_FontAsset font, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( false, content, element, default, default, font, fontSize, TextAlign, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the text</param><param name="rot">The orientation of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the text</param>
		[MethodImpl( INLINE )] public static void Text( TextElement element, Vector3 pos, Quaternion rot, string content, TextAlign align, float fontSize, TMP_FontAsset font, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( false, content, element, default, default, font, fontSize, align, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="content">The text to display</param>
		[MethodImpl( INLINE )] public static void Text( TextElement element, string content ) => Text_Internal( false, content, element, default, default, Font, FontSize, TextAlign, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param>
		[MethodImpl( INLINE )] public static void Text( TextElement element, string content, TextAlign align ) => Text_Internal( false, content, element, default, default, Font, FontSize, align, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param>
		[MethodImpl( INLINE )] public static void Text( TextElement element, string content, float fontSize ) => Text_Internal( false, content, element, default, default, Font, fontSize, TextAlign, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param>
		[MethodImpl( INLINE )] public static void Text( TextElement element, string content, TextAlign align, float fontSize ) => Text_Internal( false, content, element, default, default, Font, fontSize, align, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="content">The text to display</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void Text( TextElement element, string content, TMP_FontAsset font ) => Text_Internal( false, content, element, default, default, font, FontSize, TextAlign, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void Text( TextElement element, string content, TextAlign align, TMP_FontAsset font ) => Text_Internal( false, content, element, default, default, font, FontSize, align, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void Text( TextElement element, string content, float fontSize, TMP_FontAsset font ) => Text_Internal( false, content, element, default, default, font, fontSize, TextAlign, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void Text( TextElement element, string content, TextAlign align, float fontSize, TMP_FontAsset font ) => Text_Internal( false, content, element, default, default, font, fontSize, align, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="content">The text to display</param><param name="color">The color of the text</param>
		[MethodImpl( INLINE )] public static void Text( TextElement element, string content, Color color ) => Text_Internal( false, content, element, default, default, Font, FontSize, TextAlign, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="color">The color of the text</param>
		[MethodImpl( INLINE )] public static void Text( TextElement element, string content, TextAlign align, Color color ) => Text_Internal( false, content, element, default, default, Font, FontSize, align, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="color">The color of the text</param>
		[MethodImpl( INLINE )] public static void Text( TextElement element, string content, float fontSize, Color color ) => Text_Internal( false, content, element, default, default, Font, fontSize, TextAlign, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="color">The color of the text</param>
		[MethodImpl( INLINE )] public static void Text( TextElement element, string content, TextAlign align, float fontSize, Color color ) => Text_Internal( false, content, element, default, default, Font, fontSize, align, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="content">The text to display</param><param name="font">The font to use</param><param name="color">The color of the text</param>
		[MethodImpl( INLINE )] public static void Text( TextElement element, string content, TMP_FontAsset font, Color color ) => Text_Internal( false, content, element, default, default, font, FontSize, TextAlign, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the text</param>
		[MethodImpl( INLINE )] public static void Text( TextElement element, string content, TextAlign align, TMP_FontAsset font, Color color ) => Text_Internal( false, content, element, default, default, font, FontSize, align, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the text</param>
		[MethodImpl( INLINE )] public static void Text( TextElement element, string content, float fontSize, TMP_FontAsset font, Color color ) => Text_Internal( false, content, element, default, default, font, fontSize, TextAlign, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the text</param>
		[MethodImpl( INLINE )] public static void Text( TextElement element, string content, TextAlign align, float fontSize, TMP_FontAsset font, Color color ) => Text_Internal( false, content, element, default, default, font, fontSize, align, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="content">The text to display</param>
		[MethodImpl( INLINE )] public static void Text( Vector3 pos, string content ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( false, content, null, default, default, Font, FontSize, TextAlign, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param>
		[MethodImpl( INLINE )] public static void Text( Vector3 pos, string content, TextAlign align ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( false, content, null, default, default, Font, FontSize, align, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param>
		[MethodImpl( INLINE )] public static void Text( Vector3 pos, string content, float fontSize ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( false, content, null, default, default, Font, fontSize, TextAlign, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param>
		[MethodImpl( INLINE )] public static void Text( Vector3 pos, string content, TextAlign align, float fontSize ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( false, content, null, default, default, Font, fontSize, align, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="content">The text to display</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void Text( Vector3 pos, string content, TMP_FontAsset font ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( false, content, null, default, default, font, FontSize, TextAlign, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void Text( Vector3 pos, string content, TextAlign align, TMP_FontAsset font ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( false, content, null, default, default, font, FontSize, align, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void Text( Vector3 pos, string content, float fontSize, TMP_FontAsset font ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( false, content, null, default, default, font, fontSize, TextAlign, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void Text( Vector3 pos, string content, TextAlign align, float fontSize, TMP_FontAsset font ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( false, content, null, default, default, font, fontSize, align, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="content">The text to display</param><param name="color">The color of the text</param>
		[MethodImpl( INLINE )] public static void Text( Vector3 pos, string content, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( false, content, null, default, default, Font, FontSize, TextAlign, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="color">The color of the text</param>
		[MethodImpl( INLINE )] public static void Text( Vector3 pos, string content, TextAlign align, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( false, content, null, default, default, Font, FontSize, align, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="color">The color of the text</param>
		[MethodImpl( INLINE )] public static void Text( Vector3 pos, string content, float fontSize, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( false, content, null, default, default, Font, fontSize, TextAlign, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="color">The color of the text</param>
		[MethodImpl( INLINE )] public static void Text( Vector3 pos, string content, TextAlign align, float fontSize, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( false, content, null, default, default, Font, fontSize, align, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="content">The text to display</param><param name="font">The font to use</param><param name="color">The color of the text</param>
		[MethodImpl( INLINE )] public static void Text( Vector3 pos, string content, TMP_FontAsset font, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( false, content, null, default, default, font, FontSize, TextAlign, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the text</param>
		[MethodImpl( INLINE )] public static void Text( Vector3 pos, string content, TextAlign align, TMP_FontAsset font, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( false, content, null, default, default, font, FontSize, align, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the text</param>
		[MethodImpl( INLINE )] public static void Text( Vector3 pos, string content, float fontSize, TMP_FontAsset font, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( false, content, null, default, default, font, fontSize, TextAlign, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the text</param>
		[MethodImpl( INLINE )] public static void Text( Vector3 pos, string content, TextAlign align, float fontSize, TMP_FontAsset font, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( false, content, null, default, default, font, fontSize, align, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="rot">The orientation of the text</param><param name="content">The text to display</param>
		[MethodImpl( INLINE )] public static void Text( Vector3 pos, Quaternion rot, string content ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( false, content, null, default, default, Font, FontSize, TextAlign, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="rot">The orientation of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param>
		[MethodImpl( INLINE )] public static void Text( Vector3 pos, Quaternion rot, string content, TextAlign align ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( false, content, null, default, default, Font, FontSize, align, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="rot">The orientation of the text</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param>
		[MethodImpl( INLINE )] public static void Text( Vector3 pos, Quaternion rot, string content, float fontSize ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( false, content, null, default, default, Font, fontSize, TextAlign, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="rot">The orientation of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param>
		[MethodImpl( INLINE )] public static void Text( Vector3 pos, Quaternion rot, string content, TextAlign align, float fontSize ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( false, content, null, default, default, Font, fontSize, align, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="rot">The orientation of the text</param><param name="content">The text to display</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void Text( Vector3 pos, Quaternion rot, string content, TMP_FontAsset font ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( false, content, null, default, default, font, FontSize, TextAlign, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="rot">The orientation of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void Text( Vector3 pos, Quaternion rot, string content, TextAlign align, TMP_FontAsset font ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( false, content, null, default, default, font, FontSize, align, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="rot">The orientation of the text</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void Text( Vector3 pos, Quaternion rot, string content, float fontSize, TMP_FontAsset font ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( false, content, null, default, default, font, fontSize, TextAlign, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="rot">The orientation of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void Text( Vector3 pos, Quaternion rot, string content, TextAlign align, float fontSize, TMP_FontAsset font ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( false, content, null, default, default, font, fontSize, align, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="rot">The orientation of the text</param><param name="content">The text to display</param><param name="color">The color of the text</param>
		[MethodImpl( INLINE )] public static void Text( Vector3 pos, Quaternion rot, string content, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( false, content, null, default, default, Font, FontSize, TextAlign, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="rot">The orientation of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="color">The color of the text</param>
		[MethodImpl( INLINE )] public static void Text( Vector3 pos, Quaternion rot, string content, TextAlign align, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( false, content, null, default, default, Font, FontSize, align, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="rot">The orientation of the text</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="color">The color of the text</param>
		[MethodImpl( INLINE )] public static void Text( Vector3 pos, Quaternion rot, string content, float fontSize, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( false, content, null, default, default, Font, fontSize, TextAlign, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="rot">The orientation of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="color">The color of the text</param>
		[MethodImpl( INLINE )] public static void Text( Vector3 pos, Quaternion rot, string content, TextAlign align, float fontSize, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( false, content, null, default, default, Font, fontSize, align, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="rot">The orientation of the text</param><param name="content">The text to display</param><param name="font">The font to use</param><param name="color">The color of the text</param>
		[MethodImpl( INLINE )] public static void Text( Vector3 pos, Quaternion rot, string content, TMP_FontAsset font, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( false, content, null, default, default, font, FontSize, TextAlign, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="rot">The orientation of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the text</param>
		[MethodImpl( INLINE )] public static void Text( Vector3 pos, Quaternion rot, string content, TextAlign align, TMP_FontAsset font, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( false, content, null, default, default, font, FontSize, align, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="rot">The orientation of the text</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the text</param>
		[MethodImpl( INLINE )] public static void Text( Vector3 pos, Quaternion rot, string content, float fontSize, TMP_FontAsset font, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( false, content, null, default, default, font, fontSize, TextAlign, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="rot">The orientation of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the text</param>
		[MethodImpl( INLINE )] public static void Text( Vector3 pos, Quaternion rot, string content, TextAlign align, float fontSize, TMP_FontAsset font, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( false, content, null, default, default, font, fontSize, align, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="content">The text to display</param>
		[MethodImpl( INLINE )] public static void Text( string content ) => Text_Internal( false, content, null, default, default, Font, FontSize, TextAlign, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="content">The text to display</param><param name="align">The text alignment to use</param>
		[MethodImpl( INLINE )] public static void Text( string content, TextAlign align ) => Text_Internal( false, content, null, default, default, Font, FontSize, align, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param>
		[MethodImpl( INLINE )] public static void Text( string content, float fontSize ) => Text_Internal( false, content, null, default, default, Font, fontSize, TextAlign, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param>
		[MethodImpl( INLINE )] public static void Text( string content, TextAlign align, float fontSize ) => Text_Internal( false, content, null, default, default, Font, fontSize, align, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="content">The text to display</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void Text( string content, TMP_FontAsset font ) => Text_Internal( false, content, null, default, default, font, FontSize, TextAlign, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void Text( string content, TextAlign align, TMP_FontAsset font ) => Text_Internal( false, content, null, default, default, font, FontSize, align, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void Text( string content, float fontSize, TMP_FontAsset font ) => Text_Internal( false, content, null, default, default, font, fontSize, TextAlign, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void Text( string content, TextAlign align, float fontSize, TMP_FontAsset font ) => Text_Internal( false, content, null, default, default, font, fontSize, align, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="content">The text to display</param><param name="color">The color of the text</param>
		[MethodImpl( INLINE )] public static void Text( string content, Color color ) => Text_Internal( false, content, null, default, default, Font, FontSize, TextAlign, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="color">The color of the text</param>
		[MethodImpl( INLINE )] public static void Text( string content, TextAlign align, Color color ) => Text_Internal( false, content, null, default, default, Font, FontSize, align, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="color">The color of the text</param>
		[MethodImpl( INLINE )] public static void Text( string content, float fontSize, Color color ) => Text_Internal( false, content, null, default, default, Font, fontSize, TextAlign, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="color">The color of the text</param>
		[MethodImpl( INLINE )] public static void Text( string content, TextAlign align, float fontSize, Color color ) => Text_Internal( false, content, null, default, default, Font, fontSize, align, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="content">The text to display</param><param name="font">The font to use</param><param name="color">The color of the text</param>
		[MethodImpl( INLINE )] public static void Text( string content, TMP_FontAsset font, Color color ) => Text_Internal( false, content, null, default, default, font, FontSize, TextAlign, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the text</param>
		[MethodImpl( INLINE )] public static void Text( string content, TextAlign align, TMP_FontAsset font, Color color ) => Text_Internal( false, content, null, default, default, font, FontSize, align, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the text</param>
		[MethodImpl( INLINE )] public static void Text( string content, float fontSize, TMP_FontAsset font, Color color ) => Text_Internal( false, content, null, default, default, font, fontSize, TextAlign, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the text</param>
		[MethodImpl( INLINE )] public static void Text( string content, TextAlign align, float fontSize, TMP_FontAsset font, Color color ) => Text_Internal( false, content, null, default, default, font, fontSize, align, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Vector3 pos, Vector2 pivot, Vector2 size, string content ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( true, content, element, pivot, size, Font, FontSize, TextAlign, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="align">The text alignment to use</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Vector3 pos, Vector2 pivot, Vector2 size, string content, TextAlign align ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( true, content, element, pivot, size, Font, FontSize, align, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Vector3 pos, Vector2 pivot, Vector2 size, string content, float fontSize ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( true, content, element, pivot, size, Font, fontSize, TextAlign, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Vector3 pos, Vector2 pivot, Vector2 size, string content, TextAlign align, float fontSize ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( true, content, element, pivot, size, Font, fontSize, align, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Vector3 pos, Vector2 pivot, Vector2 size, string content, TMP_FontAsset font ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( true, content, element, pivot, size, font, FontSize, TextAlign, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Vector3 pos, Vector2 pivot, Vector2 size, string content, TextAlign align, TMP_FontAsset font ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( true, content, element, pivot, size, font, FontSize, align, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Vector3 pos, Vector2 pivot, Vector2 size, string content, float fontSize, TMP_FontAsset font ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( true, content, element, pivot, size, font, fontSize, TextAlign, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Vector3 pos, Vector2 pivot, Vector2 size, string content, TextAlign align, float fontSize, TMP_FontAsset font ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( true, content, element, pivot, size, font, fontSize, align, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Vector3 pos, Vector2 pivot, Vector2 size, string content, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( true, content, element, pivot, size, Font, FontSize, TextAlign, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Vector3 pos, Vector2 pivot, Vector2 size, string content, TextAlign align, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( true, content, element, pivot, size, Font, FontSize, align, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Vector3 pos, Vector2 pivot, Vector2 size, string content, float fontSize, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( true, content, element, pivot, size, Font, fontSize, TextAlign, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Vector3 pos, Vector2 pivot, Vector2 size, string content, TextAlign align, float fontSize, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( true, content, element, pivot, size, Font, fontSize, align, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="font">The font to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Vector3 pos, Vector2 pivot, Vector2 size, string content, TMP_FontAsset font, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( true, content, element, pivot, size, font, FontSize, TextAlign, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Vector3 pos, Vector2 pivot, Vector2 size, string content, TextAlign align, TMP_FontAsset font, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( true, content, element, pivot, size, font, FontSize, align, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Vector3 pos, Vector2 pivot, Vector2 size, string content, float fontSize, TMP_FontAsset font, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( true, content, element, pivot, size, font, fontSize, TextAlign, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Vector3 pos, Vector2 pivot, Vector2 size, string content, TextAlign align, float fontSize, TMP_FontAsset font, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( true, content, element, pivot, size, font, fontSize, align, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the textrect</param><param name="rot">The orientation of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Vector3 pos, Quaternion rot, Vector2 pivot, Vector2 size, string content ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( true, content, element, pivot, size, Font, FontSize, TextAlign, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the textrect</param><param name="rot">The orientation of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="align">The text alignment to use</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Vector3 pos, Quaternion rot, Vector2 pivot, Vector2 size, string content, TextAlign align ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( true, content, element, pivot, size, Font, FontSize, align, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the textrect</param><param name="rot">The orientation of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Vector3 pos, Quaternion rot, Vector2 pivot, Vector2 size, string content, float fontSize ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( true, content, element, pivot, size, Font, fontSize, TextAlign, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the textrect</param><param name="rot">The orientation of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Vector3 pos, Quaternion rot, Vector2 pivot, Vector2 size, string content, TextAlign align, float fontSize ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( true, content, element, pivot, size, Font, fontSize, align, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the textrect</param><param name="rot">The orientation of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Vector3 pos, Quaternion rot, Vector2 pivot, Vector2 size, string content, TMP_FontAsset font ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( true, content, element, pivot, size, font, FontSize, TextAlign, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the textrect</param><param name="rot">The orientation of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Vector3 pos, Quaternion rot, Vector2 pivot, Vector2 size, string content, TextAlign align, TMP_FontAsset font ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( true, content, element, pivot, size, font, FontSize, align, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the textrect</param><param name="rot">The orientation of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Vector3 pos, Quaternion rot, Vector2 pivot, Vector2 size, string content, float fontSize, TMP_FontAsset font ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( true, content, element, pivot, size, font, fontSize, TextAlign, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the textrect</param><param name="rot">The orientation of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Vector3 pos, Quaternion rot, Vector2 pivot, Vector2 size, string content, TextAlign align, float fontSize, TMP_FontAsset font ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( true, content, element, pivot, size, font, fontSize, align, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the textrect</param><param name="rot">The orientation of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Vector3 pos, Quaternion rot, Vector2 pivot, Vector2 size, string content, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( true, content, element, pivot, size, Font, FontSize, TextAlign, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the textrect</param><param name="rot">The orientation of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Vector3 pos, Quaternion rot, Vector2 pivot, Vector2 size, string content, TextAlign align, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( true, content, element, pivot, size, Font, FontSize, align, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the textrect</param><param name="rot">The orientation of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Vector3 pos, Quaternion rot, Vector2 pivot, Vector2 size, string content, float fontSize, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( true, content, element, pivot, size, Font, fontSize, TextAlign, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the textrect</param><param name="rot">The orientation of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Vector3 pos, Quaternion rot, Vector2 pivot, Vector2 size, string content, TextAlign align, float fontSize, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( true, content, element, pivot, size, Font, fontSize, align, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the textrect</param><param name="rot">The orientation of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="font">The font to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Vector3 pos, Quaternion rot, Vector2 pivot, Vector2 size, string content, TMP_FontAsset font, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( true, content, element, pivot, size, font, FontSize, TextAlign, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the textrect</param><param name="rot">The orientation of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Vector3 pos, Quaternion rot, Vector2 pivot, Vector2 size, string content, TextAlign align, TMP_FontAsset font, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( true, content, element, pivot, size, font, FontSize, align, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the textrect</param><param name="rot">The orientation of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Vector3 pos, Quaternion rot, Vector2 pivot, Vector2 size, string content, float fontSize, TMP_FontAsset font, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( true, content, element, pivot, size, font, fontSize, TextAlign, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pos">The position of the textrect</param><param name="rot">The orientation of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Vector3 pos, Quaternion rot, Vector2 pivot, Vector2 size, string content, TextAlign align, float fontSize, TMP_FontAsset font, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( true, content, element, pivot, size, font, fontSize, align, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Vector2 pivot, Vector2 size, string content ) => Text_Internal( true, content, element, pivot, size, Font, FontSize, TextAlign, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="align">The text alignment to use</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Vector2 pivot, Vector2 size, string content, TextAlign align ) => Text_Internal( true, content, element, pivot, size, Font, FontSize, align, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Vector2 pivot, Vector2 size, string content, float fontSize ) => Text_Internal( true, content, element, pivot, size, Font, fontSize, TextAlign, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Vector2 pivot, Vector2 size, string content, TextAlign align, float fontSize ) => Text_Internal( true, content, element, pivot, size, Font, fontSize, align, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Vector2 pivot, Vector2 size, string content, TMP_FontAsset font ) => Text_Internal( true, content, element, pivot, size, font, FontSize, TextAlign, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Vector2 pivot, Vector2 size, string content, TextAlign align, TMP_FontAsset font ) => Text_Internal( true, content, element, pivot, size, font, FontSize, align, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Vector2 pivot, Vector2 size, string content, float fontSize, TMP_FontAsset font ) => Text_Internal( true, content, element, pivot, size, font, fontSize, TextAlign, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Vector2 pivot, Vector2 size, string content, TextAlign align, float fontSize, TMP_FontAsset font ) => Text_Internal( true, content, element, pivot, size, font, fontSize, align, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Vector2 pivot, Vector2 size, string content, Color color ) => Text_Internal( true, content, element, pivot, size, Font, FontSize, TextAlign, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Vector2 pivot, Vector2 size, string content, TextAlign align, Color color ) => Text_Internal( true, content, element, pivot, size, Font, FontSize, align, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Vector2 pivot, Vector2 size, string content, float fontSize, Color color ) => Text_Internal( true, content, element, pivot, size, Font, fontSize, TextAlign, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Vector2 pivot, Vector2 size, string content, TextAlign align, float fontSize, Color color ) => Text_Internal( true, content, element, pivot, size, Font, fontSize, align, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="font">The font to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Vector2 pivot, Vector2 size, string content, TMP_FontAsset font, Color color ) => Text_Internal( true, content, element, pivot, size, font, FontSize, TextAlign, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Vector2 pivot, Vector2 size, string content, TextAlign align, TMP_FontAsset font, Color color ) => Text_Internal( true, content, element, pivot, size, font, FontSize, align, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Vector2 pivot, Vector2 size, string content, float fontSize, TMP_FontAsset font, Color color ) => Text_Internal( true, content, element, pivot, size, font, fontSize, TextAlign, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Vector2 pivot, Vector2 size, string content, TextAlign align, float fontSize, TMP_FontAsset font, Color color ) => Text_Internal( true, content, element, pivot, size, font, fontSize, align, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param>
		[MethodImpl( INLINE )] public static void TextRect( Vector3 pos, Vector2 pivot, Vector2 size, string content ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( true, content, null, pivot, size, Font, FontSize, TextAlign, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="align">The text alignment to use</param>
		[MethodImpl( INLINE )] public static void TextRect( Vector3 pos, Vector2 pivot, Vector2 size, string content, TextAlign align ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( true, content, null, pivot, size, Font, FontSize, align, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param>
		[MethodImpl( INLINE )] public static void TextRect( Vector3 pos, Vector2 pivot, Vector2 size, string content, float fontSize ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( true, content, null, pivot, size, Font, fontSize, TextAlign, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param>
		[MethodImpl( INLINE )] public static void TextRect( Vector3 pos, Vector2 pivot, Vector2 size, string content, TextAlign align, float fontSize ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( true, content, null, pivot, size, Font, fontSize, align, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void TextRect( Vector3 pos, Vector2 pivot, Vector2 size, string content, TMP_FontAsset font ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( true, content, null, pivot, size, font, FontSize, TextAlign, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void TextRect( Vector3 pos, Vector2 pivot, Vector2 size, string content, TextAlign align, TMP_FontAsset font ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( true, content, null, pivot, size, font, FontSize, align, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void TextRect( Vector3 pos, Vector2 pivot, Vector2 size, string content, float fontSize, TMP_FontAsset font ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( true, content, null, pivot, size, font, fontSize, TextAlign, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void TextRect( Vector3 pos, Vector2 pivot, Vector2 size, string content, TextAlign align, float fontSize, TMP_FontAsset font ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( true, content, null, pivot, size, font, fontSize, align, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( Vector3 pos, Vector2 pivot, Vector2 size, string content, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( true, content, null, pivot, size, Font, FontSize, TextAlign, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( Vector3 pos, Vector2 pivot, Vector2 size, string content, TextAlign align, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( true, content, null, pivot, size, Font, FontSize, align, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( Vector3 pos, Vector2 pivot, Vector2 size, string content, float fontSize, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( true, content, null, pivot, size, Font, fontSize, TextAlign, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( Vector3 pos, Vector2 pivot, Vector2 size, string content, TextAlign align, float fontSize, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( true, content, null, pivot, size, Font, fontSize, align, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="font">The font to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( Vector3 pos, Vector2 pivot, Vector2 size, string content, TMP_FontAsset font, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( true, content, null, pivot, size, font, FontSize, TextAlign, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( Vector3 pos, Vector2 pivot, Vector2 size, string content, TextAlign align, TMP_FontAsset font, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( true, content, null, pivot, size, font, FontSize, align, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( Vector3 pos, Vector2 pivot, Vector2 size, string content, float fontSize, TMP_FontAsset font, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( true, content, null, pivot, size, font, fontSize, TextAlign, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( Vector3 pos, Vector2 pivot, Vector2 size, string content, TextAlign align, float fontSize, TMP_FontAsset font, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( true, content, null, pivot, size, font, fontSize, align, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the textrect</param><param name="rot">The orientation of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param>
		[MethodImpl( INLINE )] public static void TextRect( Vector3 pos, Quaternion rot, Vector2 pivot, Vector2 size, string content ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( true, content, null, pivot, size, Font, FontSize, TextAlign, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the textrect</param><param name="rot">The orientation of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="align">The text alignment to use</param>
		[MethodImpl( INLINE )] public static void TextRect( Vector3 pos, Quaternion rot, Vector2 pivot, Vector2 size, string content, TextAlign align ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( true, content, null, pivot, size, Font, FontSize, align, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the textrect</param><param name="rot">The orientation of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param>
		[MethodImpl( INLINE )] public static void TextRect( Vector3 pos, Quaternion rot, Vector2 pivot, Vector2 size, string content, float fontSize ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( true, content, null, pivot, size, Font, fontSize, TextAlign, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the textrect</param><param name="rot">The orientation of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param>
		[MethodImpl( INLINE )] public static void TextRect( Vector3 pos, Quaternion rot, Vector2 pivot, Vector2 size, string content, TextAlign align, float fontSize ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( true, content, null, pivot, size, Font, fontSize, align, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the textrect</param><param name="rot">The orientation of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void TextRect( Vector3 pos, Quaternion rot, Vector2 pivot, Vector2 size, string content, TMP_FontAsset font ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( true, content, null, pivot, size, font, FontSize, TextAlign, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the textrect</param><param name="rot">The orientation of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void TextRect( Vector3 pos, Quaternion rot, Vector2 pivot, Vector2 size, string content, TextAlign align, TMP_FontAsset font ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( true, content, null, pivot, size, font, FontSize, align, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the textrect</param><param name="rot">The orientation of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void TextRect( Vector3 pos, Quaternion rot, Vector2 pivot, Vector2 size, string content, float fontSize, TMP_FontAsset font ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( true, content, null, pivot, size, font, fontSize, TextAlign, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the textrect</param><param name="rot">The orientation of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void TextRect( Vector3 pos, Quaternion rot, Vector2 pivot, Vector2 size, string content, TextAlign align, float fontSize, TMP_FontAsset font ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( true, content, null, pivot, size, font, fontSize, align, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the textrect</param><param name="rot">The orientation of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( Vector3 pos, Quaternion rot, Vector2 pivot, Vector2 size, string content, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( true, content, null, pivot, size, Font, FontSize, TextAlign, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the textrect</param><param name="rot">The orientation of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( Vector3 pos, Quaternion rot, Vector2 pivot, Vector2 size, string content, TextAlign align, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( true, content, null, pivot, size, Font, FontSize, align, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the textrect</param><param name="rot">The orientation of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( Vector3 pos, Quaternion rot, Vector2 pivot, Vector2 size, string content, float fontSize, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( true, content, null, pivot, size, Font, fontSize, TextAlign, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the textrect</param><param name="rot">The orientation of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( Vector3 pos, Quaternion rot, Vector2 pivot, Vector2 size, string content, TextAlign align, float fontSize, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( true, content, null, pivot, size, Font, fontSize, align, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the textrect</param><param name="rot">The orientation of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="font">The font to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( Vector3 pos, Quaternion rot, Vector2 pivot, Vector2 size, string content, TMP_FontAsset font, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( true, content, null, pivot, size, font, FontSize, TextAlign, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the textrect</param><param name="rot">The orientation of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( Vector3 pos, Quaternion rot, Vector2 pivot, Vector2 size, string content, TextAlign align, TMP_FontAsset font, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( true, content, null, pivot, size, font, FontSize, align, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the textrect</param><param name="rot">The orientation of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( Vector3 pos, Quaternion rot, Vector2 pivot, Vector2 size, string content, float fontSize, TMP_FontAsset font, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( true, content, null, pivot, size, font, fontSize, TextAlign, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the textrect</param><param name="rot">The orientation of the textrect</param><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( Vector3 pos, Quaternion rot, Vector2 pivot, Vector2 size, string content, TextAlign align, float fontSize, TMP_FontAsset font, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( true, content, null, pivot, size, font, fontSize, align, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param>
		[MethodImpl( INLINE )] public static void TextRect( Vector2 pivot, Vector2 size, string content ) => Text_Internal( true, content, null, pivot, size, Font, FontSize, TextAlign, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="align">The text alignment to use</param>
		[MethodImpl( INLINE )] public static void TextRect( Vector2 pivot, Vector2 size, string content, TextAlign align ) => Text_Internal( true, content, null, pivot, size, Font, FontSize, align, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param>
		[MethodImpl( INLINE )] public static void TextRect( Vector2 pivot, Vector2 size, string content, float fontSize ) => Text_Internal( true, content, null, pivot, size, Font, fontSize, TextAlign, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param>
		[MethodImpl( INLINE )] public static void TextRect( Vector2 pivot, Vector2 size, string content, TextAlign align, float fontSize ) => Text_Internal( true, content, null, pivot, size, Font, fontSize, align, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void TextRect( Vector2 pivot, Vector2 size, string content, TMP_FontAsset font ) => Text_Internal( true, content, null, pivot, size, font, FontSize, TextAlign, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void TextRect( Vector2 pivot, Vector2 size, string content, TextAlign align, TMP_FontAsset font ) => Text_Internal( true, content, null, pivot, size, font, FontSize, align, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void TextRect( Vector2 pivot, Vector2 size, string content, float fontSize, TMP_FontAsset font ) => Text_Internal( true, content, null, pivot, size, font, fontSize, TextAlign, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void TextRect( Vector2 pivot, Vector2 size, string content, TextAlign align, float fontSize, TMP_FontAsset font ) => Text_Internal( true, content, null, pivot, size, font, fontSize, align, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( Vector2 pivot, Vector2 size, string content, Color color ) => Text_Internal( true, content, null, pivot, size, Font, FontSize, TextAlign, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( Vector2 pivot, Vector2 size, string content, TextAlign align, Color color ) => Text_Internal( true, content, null, pivot, size, Font, FontSize, align, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( Vector2 pivot, Vector2 size, string content, float fontSize, Color color ) => Text_Internal( true, content, null, pivot, size, Font, fontSize, TextAlign, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( Vector2 pivot, Vector2 size, string content, TextAlign align, float fontSize, Color color ) => Text_Internal( true, content, null, pivot, size, Font, fontSize, align, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="font">The font to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( Vector2 pivot, Vector2 size, string content, TMP_FontAsset font, Color color ) => Text_Internal( true, content, null, pivot, size, font, FontSize, TextAlign, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( Vector2 pivot, Vector2 size, string content, TextAlign align, TMP_FontAsset font, Color color ) => Text_Internal( true, content, null, pivot, size, font, FontSize, align, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( Vector2 pivot, Vector2 size, string content, float fontSize, TMP_FontAsset font, Color color ) => Text_Internal( true, content, null, pivot, size, font, fontSize, TextAlign, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pivot">The normalized pivot of the local space rectangle for text positioning, like Unity's RectTransform</param><param name="size">The local space size of the rectangle to draw text the in</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( Vector2 pivot, Vector2 size, string content, TextAlign align, float fontSize, TMP_FontAsset font, Color color ) => Text_Internal( true, content, null, pivot, size, font, fontSize, align, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="rect">The local space rectangle to display text within</param><param name="content">The text to display</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Rect rect, string content ) => TextRect_Internal( content, element, rect, Font, FontSize, TextAlign, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="rect">The local space rectangle to display text within</param><param name="content">The text to display</param><param name="align">The text alignment to use</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Rect rect, string content, TextAlign align ) => TextRect_Internal( content, element, rect, Font, FontSize, align, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="rect">The local space rectangle to display text within</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Rect rect, string content, float fontSize ) => TextRect_Internal( content, element, rect, Font, fontSize, TextAlign, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="rect">The local space rectangle to display text within</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Rect rect, string content, TextAlign align, float fontSize ) => TextRect_Internal( content, element, rect, Font, fontSize, align, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="rect">The local space rectangle to display text within</param><param name="content">The text to display</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Rect rect, string content, TMP_FontAsset font ) => TextRect_Internal( content, element, rect, font, FontSize, TextAlign, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="rect">The local space rectangle to display text within</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Rect rect, string content, TextAlign align, TMP_FontAsset font ) => TextRect_Internal( content, element, rect, font, FontSize, align, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="rect">The local space rectangle to display text within</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Rect rect, string content, float fontSize, TMP_FontAsset font ) => TextRect_Internal( content, element, rect, font, fontSize, TextAlign, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="rect">The local space rectangle to display text within</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Rect rect, string content, TextAlign align, float fontSize, TMP_FontAsset font ) => TextRect_Internal( content, element, rect, font, fontSize, align, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="rect">The local space rectangle to display text within</param><param name="content">The text to display</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Rect rect, string content, Color color ) => TextRect_Internal( content, element, rect, Font, FontSize, TextAlign, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="rect">The local space rectangle to display text within</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Rect rect, string content, TextAlign align, Color color ) => TextRect_Internal( content, element, rect, Font, FontSize, align, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="rect">The local space rectangle to display text within</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Rect rect, string content, float fontSize, Color color ) => TextRect_Internal( content, element, rect, Font, fontSize, TextAlign, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="rect">The local space rectangle to display text within</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Rect rect, string content, TextAlign align, float fontSize, Color color ) => TextRect_Internal( content, element, rect, Font, fontSize, align, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="rect">The local space rectangle to display text within</param><param name="content">The text to display</param><param name="font">The font to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Rect rect, string content, TMP_FontAsset font, Color color ) => TextRect_Internal( content, element, rect, font, FontSize, TextAlign, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="rect">The local space rectangle to display text within</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Rect rect, string content, TextAlign align, TMP_FontAsset font, Color color ) => TextRect_Internal( content, element, rect, font, FontSize, align, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="rect">The local space rectangle to display text within</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Rect rect, string content, float fontSize, TMP_FontAsset font, Color color ) => TextRect_Internal( content, element, rect, font, fontSize, TextAlign, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="element">The text element to use when drawing this text</param><param name="rect">The local space rectangle to display text within</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( TextElement element, Rect rect, string content, TextAlign align, float fontSize, TMP_FontAsset font, Color color ) => TextRect_Internal( content, element, rect, font, fontSize, align, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="rect">The local space rectangle to display text within</param><param name="content">The text to display</param>
		[MethodImpl( INLINE )] public static void TextRect( Rect rect, string content ) => TextRect_Internal( content, null, rect, Font, FontSize, TextAlign, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="rect">The local space rectangle to display text within</param><param name="content">The text to display</param><param name="align">The text alignment to use</param>
		[MethodImpl( INLINE )] public static void TextRect( Rect rect, string content, TextAlign align ) => TextRect_Internal( content, null, rect, Font, FontSize, align, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="rect">The local space rectangle to display text within</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param>
		[MethodImpl( INLINE )] public static void TextRect( Rect rect, string content, float fontSize ) => TextRect_Internal( content, null, rect, Font, fontSize, TextAlign, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="rect">The local space rectangle to display text within</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param>
		[MethodImpl( INLINE )] public static void TextRect( Rect rect, string content, TextAlign align, float fontSize ) => TextRect_Internal( content, null, rect, Font, fontSize, align, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="rect">The local space rectangle to display text within</param><param name="content">The text to display</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void TextRect( Rect rect, string content, TMP_FontAsset font ) => TextRect_Internal( content, null, rect, font, FontSize, TextAlign, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="rect">The local space rectangle to display text within</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void TextRect( Rect rect, string content, TextAlign align, TMP_FontAsset font ) => TextRect_Internal( content, null, rect, font, FontSize, align, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="rect">The local space rectangle to display text within</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void TextRect( Rect rect, string content, float fontSize, TMP_FontAsset font ) => TextRect_Internal( content, null, rect, font, fontSize, TextAlign, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="rect">The local space rectangle to display text within</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param>
		[MethodImpl( INLINE )] public static void TextRect( Rect rect, string content, TextAlign align, float fontSize, TMP_FontAsset font ) => TextRect_Internal( content, null, rect, font, fontSize, align, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="rect">The local space rectangle to display text within</param><param name="content">The text to display</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( Rect rect, string content, Color color ) => TextRect_Internal( content, null, rect, Font, FontSize, TextAlign, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="rect">The local space rectangle to display text within</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( Rect rect, string content, TextAlign align, Color color ) => TextRect_Internal( content, null, rect, Font, FontSize, align, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="rect">The local space rectangle to display text within</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( Rect rect, string content, float fontSize, Color color ) => TextRect_Internal( content, null, rect, Font, fontSize, TextAlign, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="rect">The local space rectangle to display text within</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( Rect rect, string content, TextAlign align, float fontSize, Color color ) => TextRect_Internal( content, null, rect, Font, fontSize, align, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="rect">The local space rectangle to display text within</param><param name="content">The text to display</param><param name="font">The font to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( Rect rect, string content, TMP_FontAsset font, Color color ) => TextRect_Internal( content, null, rect, font, FontSize, TextAlign, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="rect">The local space rectangle to display text within</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( Rect rect, string content, TextAlign align, TMP_FontAsset font, Color color ) => TextRect_Internal( content, null, rect, font, FontSize, align, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="rect">The local space rectangle to display text within</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( Rect rect, string content, float fontSize, TMP_FontAsset font, Color color ) => TextRect_Internal( content, null, rect, font, fontSize, TextAlign, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="rect">The local space rectangle to display text within</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the textrect</param>
		[MethodImpl( INLINE )] public static void TextRect( Rect rect, string content, TextAlign align, float fontSize, TMP_FontAsset font, Color color ) => TextRect_Internal( content, null, rect, font, fontSize, align, color );
		/// <summary>Draws a texture</summary><param name="texture">The texture to draw. Its alpha channel will be used as transparency/intensity</param><param name="rect">The region to draw the texture in</param><param name="uvs">The UV coordinates to use. Position will offset the texture, size will scale the texture. Default UVs to fit the texture: (0,0,1,1)</param>
		[MethodImpl( INLINE )] public static void Texture( Texture texture, Rect rect, Rect uvs ) => Texture_Internal( texture, rect, uvs, Color );
		/// <summary>Draws a texture</summary><param name="texture">The texture to draw. Its alpha channel will be used as transparency/intensity</param><param name="rect">The region to draw the texture in</param><param name="uvs">The UV coordinates to use. Position will offset the texture, size will scale the texture. Default UVs to fit the texture: (0,0,1,1)</param><param name="color">The color of the texture</param>
		[MethodImpl( INLINE )] public static void Texture( Texture texture, Rect rect, Rect uvs, Color color ) => Texture_Internal( texture, rect, uvs, color );
		/// <summary>Draws a texture</summary><param name="texture">The texture to draw. Its alpha channel will be used as transparency/intensity</param><param name="rect">The region to draw the texture in</param>
		[MethodImpl( INLINE )] public static void Texture( Texture texture, Rect rect ) => Texture_RectFill_Internal( texture, rect, TextureFillMode.ScaleToFit, Color );
		/// <summary>Draws a texture</summary><param name="texture">The texture to draw. Its alpha channel will be used as transparency/intensity</param><param name="rect">The region to draw the texture in</param><param name="color">The color of the texture</param>
		[MethodImpl( INLINE )] public static void Texture( Texture texture, Rect rect, Color color ) => Texture_RectFill_Internal( texture, rect, TextureFillMode.ScaleToFit, color );
		/// <summary>Draws a texture</summary><param name="texture">The texture to draw. Its alpha channel will be used as transparency/intensity</param><param name="rect">The region to draw the texture in</param><param name="fillMode">How to place the texture within the rectangle</param>
		[MethodImpl( INLINE )] public static void Texture( Texture texture, Rect rect, TextureFillMode fillMode ) => Texture_RectFill_Internal( texture, rect, fillMode, Color );
		/// <summary>Draws a texture</summary><param name="texture">The texture to draw. Its alpha channel will be used as transparency/intensity</param><param name="rect">The region to draw the texture in</param><param name="fillMode">How to place the texture within the rectangle</param><param name="color">The color of the texture</param>
		[MethodImpl( INLINE )] public static void Texture( Texture texture, Rect rect, TextureFillMode fillMode, Color color ) => Texture_RectFill_Internal( texture, rect, fillMode, color );
		/// <summary>Draws a texture</summary><param name="texture">The texture to draw. Its alpha channel will be used as transparency/intensity</param><param name="center">The center of the texture</param><param name="size">The size of this texture</param>
		[MethodImpl( INLINE )] public static void Texture( Texture texture, Vector2 center, float size ) => Texture_PosSize_Internal( texture, center, size, TextureSizeMode.LongestSide, Color );
		/// <summary>Draws a texture</summary><param name="texture">The texture to draw. Its alpha channel will be used as transparency/intensity</param><param name="center">The center of the texture</param><param name="size">The size of this texture</param><param name="color">The color of the texture</param>
		[MethodImpl( INLINE )] public static void Texture( Texture texture, Vector2 center, float size, Color color ) => Texture_PosSize_Internal( texture, center, size, TextureSizeMode.LongestSide, color );
		/// <summary>Draws a texture</summary><param name="texture">The texture to draw. Its alpha channel will be used as transparency/intensity</param><param name="center">The center of the texture</param><param name="size">The size of this texture</param><param name="sizeMode">How to interpret the size value</param>
		[MethodImpl( INLINE )] public static void Texture( Texture texture, Vector2 center, float size, TextureSizeMode sizeMode ) => Texture_PosSize_Internal( texture, center, size, sizeMode, Color );
		/// <summary>Draws a texture</summary><param name="texture">The texture to draw. Its alpha channel will be used as transparency/intensity</param><param name="center">The center of the texture</param><param name="size">The size of this texture</param><param name="sizeMode">How to interpret the size value</param><param name="color">The color of the texture</param>
		[MethodImpl( INLINE )] public static void Texture( Texture texture, Vector2 center, float size, TextureSizeMode sizeMode, Color color ) => Texture_PosSize_Internal( texture, center, size, sizeMode, color );
	}

}
